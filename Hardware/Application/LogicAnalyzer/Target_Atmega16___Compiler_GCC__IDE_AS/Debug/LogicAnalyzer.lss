
LogicAnalyzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000007b0  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800070  00800070  00000854  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000172f  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000733  00000000  00000000  00002297  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001159  00000000  00000000  000029ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000904  00000000  00000000  00003b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f8  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000168f  00000000  00000000  00004d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  000063af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	e6 c2       	rjmp	.+1484   	; 0x5da <__vector_3>
   e:	00 00       	nop
  10:	bd c2       	rjmp	.+1402   	; 0x58c <__vector_4>
  12:	00 00       	nop
  14:	94 c2       	rjmp	.+1320   	; 0x53e <__vector_5>
  16:	00 00       	nop
  18:	44 c2       	rjmp	.+1160   	; 0x4a2 <__vector_6>
  1a:	00 00       	nop
  1c:	69 c2       	rjmp	.+1234   	; 0x4f0 <__vector_7>
  1e:	00 00       	nop
  20:	19 c2       	rjmp	.+1074   	; 0x454 <__vector_8>
  22:	00 00       	nop
  24:	c9 c1       	rjmp	.+914    	; 0x3b8 <__vector_9>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9d c1       	rjmp	.+826    	; 0x368 <__vector_11>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	cc c0       	rjmp	.+408    	; 0x1d2 <__vector_14>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	dc c1       	rjmp	.+952    	; 0x406 <__vector_19>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	45 d0       	rcall	.+138    	; 0x112 <main>
  88:	91 c3       	rjmp	.+1826   	; 0x7ac <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <receive_command>:
	
	return 0;
}

void receive_command(u8 cmd)
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	1f 92       	push	r1
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
}
_INLINE_ void Timer_Stop(u8 timer)
{
    switch(timer)
    {
        case PERIPHERAL_TIMER_0: {return Timer0_Stop(); break;}
  96:	89 83       	std	Y+1, r24	; 0x01
  98:	c9 d2       	rcall	.+1426   	; 0x62c <Timer0_Stop>
}
_INLINE_ void Timer_Reset(u8 timer)
{
    switch(timer)
    {
        case PERIPHERAL_TIMER_0: {return Timer0_Reset(); break;}
  9a:	c6 d2       	rcall	.+1420   	; 0x628 <Timer0_Reset>
	Timer_Stop(LA_TIMER);   /* Stops the timer if running to parse command */
	Timer_Reset(LA_TIMER);  /* Reset the timer for next data stream */
	boost_counter=0;        /* Reset Counter for the next data stream */
  9c:	10 92 71 00 	sts	0x0071, r1
	switch(cmd)
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	8c 3f       	cpi	r24, 0xFC	; 252
  a4:	b1 f0       	breq	.+44     	; 0xd2 <receive_command+0x46>
  a6:	50 f4       	brcc	.+20     	; 0xbc <receive_command+0x30>
  a8:	8a 3f       	cpi	r24, 0xFA	; 250
  aa:	31 f1       	breq	.+76     	; 0xf8 <receive_command+0x6c>
  ac:	18 f5       	brcc	.+70     	; 0xf4 <receive_command+0x68>
  ae:	8a 3a       	cpi	r24, 0xAA	; 170
  b0:	51 f5       	brne	.+84     	; 0x106 <receive_command+0x7a>
}
_INLINE_ void Uart_PutC(u8 uart, u8 data)
{
    switch(uart)
    {
        case PERIPHERAL_UART_0: {return Uart0_PutC(data); break;}
  b2:	8a ea       	ldi	r24, 0xAA	; 170
			mode = LA_CMD_OFF;
			/* Timer is already stopped */
			break;
		}
	}
}
  b4:	0f 90       	pop	r0
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	52 c1       	rjmp	.+676    	; 0x360 <Uart0_PutC>
void receive_command(u8 cmd)
{
	Timer_Stop(LA_TIMER);   /* Stops the timer if running to parse command */
	Timer_Reset(LA_TIMER);  /* Reset the timer for next data stream */
	boost_counter=0;        /* Reset Counter for the next data stream */
	switch(cmd)
  bc:	8e 3f       	cpi	r24, 0xFE	; 254
  be:	99 f0       	breq	.+38     	; 0xe6 <receive_command+0x5a>
  c0:	40 f4       	brcc	.+16     	; 0xd2 <receive_command+0x46>
	{
		case LA_CMD_ANALOG:
		{
			mode = LA_CMD_ANALOG;
  c2:	8d ef       	ldi	r24, 0xFD	; 253
  c4:	80 93 70 00 	sts	0x0070, r24
}
_INLINE_ void Timer_SetCmpMatch(u8 timer, u32 ticks)
{
    switch(timer)
    {
        case PERIPHERAL_TIMER_0: {return Timer0_SetCmpMatch(ticks); break;}
  c8:	6f e9       	ldi	r22, 0x9F	; 159
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	06 c0       	rjmp	.+12     	; 0xde <receive_command+0x52>
			break;
		}
		case LA_CMD_ANALOG_X2:
		case LA_CMD_DIGITAL:
		{
			mode = cmd;
  d2:	80 93 70 00 	sts	0x0070, r24
  d6:	6f e4       	ldi	r22, 0x4F	; 79
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
			mode = LA_CMD_OFF;
			/* Timer is already stopped */
			break;
		}
	}
}
  de:	0f 90       	pop	r0
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	40 c3       	rjmp	.+1664   	; 0x766 <Timer0_SetCmpMatch>
			Timer_SetCmpMatch(LA_TIMER, LA_TIMER_TICKS_D);
			break;
		}
		case LA_CMD_DIGITAL_X2:
		{
			mode = LA_CMD_DIGITAL_X2;
  e6:	80 93 70 00 	sts	0x0070, r24
  ea:	67 e2       	ldi	r22, 0x27	; 39
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	f5 cf       	rjmp	.-22     	; 0xde <receive_command+0x52>
			break;
		}
		case LA_CMD_PULLUP_ON:
		{
			/* enable Pull-up resistances on digital input */
			Gpio_Init(LA_GPIO, 0xFF, GPIO_CONFIG_INPPUT|GPIO_CONFIG_PULL_UP);
  f4:	49 e0       	ldi	r20, 0x09	; 9
  f6:	01 c0       	rjmp	.+2      	; 0xfa <receive_command+0x6e>
			break;
		}
		case LA_CMD_PULLUP_OFF:
		{
			/* disable Pull-up resistances on digital input */
			Gpio_Init(LA_GPIO, 0xFF, GPIO_CONFIG_INPPUT|GPIO_CONFIG_NO_PULL);
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	6f ef       	ldi	r22, 0xFF	; 255
  fc:	80 e0       	ldi	r24, 0x00	; 0
			mode = LA_CMD_OFF;
			/* Timer is already stopped */
			break;
		}
	}
}
  fe:	0f 90       	pop	r0
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
			break;
		}
		case LA_CMD_PULLUP_OFF:
		{
			/* disable Pull-up resistances on digital input */
			Gpio_Init(LA_GPIO, 0xFF, GPIO_CONFIG_INPPUT|GPIO_CONFIG_NO_PULL);
 104:	b3 c0       	rjmp	.+358    	; 0x26c <Gpio_Init>
			break;
		}
		case LA_CMD_OFF:
		default:
		{
			mode = LA_CMD_OFF;
 106:	10 92 70 00 	sts	0x0070, r1
			/* Timer is already stopped */
			break;
		}
	}
}
 10a:	0f 90       	pop	r0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <main>:

int main(void)
{

	/* Initialize System Peripherals */
	Gpio_Init(LA_GPIO, 0xFF, GPIO_CONFIG_INPPUT|GPIO_CONFIG_PULL_UP);   /* Digital Input */
 112:	49 e0       	ldi	r20, 0x09	; 9
 114:	6f ef       	ldi	r22, 0xFF	; 255
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	a9 d0       	rcall	.+338    	; 0x26c <Gpio_Init>

_INLINE_ void Adc_Init(u8 adc, u8 mode)
{
    switch(adc)
    {
        case PERIPHERAL_ADC_0: {return Adc0_Init(mode); break;}
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	85 d0       	rcall	.+266    	; 0x228 <Adc0_Init>
}
_INLINE_ void Adc_SetChannel(u8 adc, u8 channel)
{
    switch(adc)
    {
        case PERIPHERAL_ADC_0: {return Adc0_SetChannel(channel); break;}
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	9f d0       	rcall	.+318    	; 0x260 <Adc0_SetChannel>

_INLINE_ void Timer_Init(u8 timer, u8 mode, u32 ticks)
{
    switch(timer)
    {
        case PERIPHERAL_TIMER_0: {return Timer0_Init(mode,ticks); break;}
 122:	4f e4       	ldi	r20, 0x4F	; 79
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	d8 d2       	rcall	.+1456   	; 0x6de <Timer0_Init>
}
_INLINE_ void Timer_Stop(u8 timer)
{
    switch(timer)
    {
        case PERIPHERAL_TIMER_0: {return Timer0_Stop(); break;}
 12e:	7e d2       	rcall	.+1276   	; 0x62c <Timer0_Stop>

_INLINE_ void Uart_Init(u8 uart, u32 baud)
{
    switch(uart)
    {
        case PERIPHERAL_UART_0: {return Uart0_Init(baud); break;}
 130:	60 e8       	ldi	r22, 0x80	; 128
 132:	74 e8       	ldi	r23, 0x84	; 132
 134:	8e e1       	ldi	r24, 0x1E	; 30
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	e3 d0       	rcall	.+454    	; 0x300 <Uart0_Init>
}
_INLINE_ void Uart_CbRecv(u8 uart, void (*receive_cb)(u8 data) )
{
    switch(uart)
    {
        case PERIPHERAL_UART_0: {return Uart0_CbRecv(receive_cb); break;}
 13a:	86 e4       	ldi	r24, 0x46	; 70
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	05 d1       	rcall	.+522    	; 0x34a <Uart0_CbRecv>
	*/
	
	/* Program Main Loop */
	while(1)
	{
		if (ALL_SET( LA_REG_TIFR , BM(LA_BIT_OCF) ))	/* check if Timer Compare Match occurred */
 140:	08 b6       	in	r0, 0x38	; 56
 142:	01 fe       	sbrs	r0, 1
 144:	fd cf       	rjmp	.-6      	; 0x140 <main+0x2e>
		{
			SET( LA_REG_TIFR , BM(LA_BIT_OCF) );		/* Clear Timer Compare Match Flag */
 146:	88 b7       	in	r24, 0x38	; 56
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	88 bf       	out	0x38, r24	; 56
			switch(mode)
 14c:	80 91 70 00 	lds	r24, 0x0070
 150:	8d 3f       	cpi	r24, 0xFD	; 253
 152:	51 f0       	breq	.+20     	; 0x168 <main+0x56>
 154:	20 f4       	brcc	.+8      	; 0x15e <main+0x4c>
 156:	8c 3f       	cpi	r24, 0xFC	; 252
 158:	99 f7       	brne	.-26     	; 0x140 <main+0x2e>
					LA_REG_UDR = LA_REG_ADC>>8;								/* Send high byte through UART */
					break;
				}
				case LA_CMD_ANALOG_X2:
				{
					SET( LA_REG_ADCSRA , BM(LA_BIT_ADSC) );					/* Start ADC Conversion */
 15a:	36 9a       	sbi	0x06, 6	; 6
					while ( ALL_SET( LA_REG_ADCSRA, BM(LA_BIT_ADSC) ) );	/* Wait until ADC Conversion Completes */
 15c:	13 c0       	rjmp	.+38     	; 0x184 <main+0x72>
	while(1)
	{
		if (ALL_SET( LA_REG_TIFR , BM(LA_BIT_OCF) ))	/* check if Timer Compare Match occurred */
		{
			SET( LA_REG_TIFR , BM(LA_BIT_OCF) );		/* Clear Timer Compare Match Flag */
			switch(mode)
 15e:	8e 3f       	cpi	r24, 0xFE	; 254
 160:	01 f1       	breq	.+64     	; 0x1a2 <main+0x90>
 162:	8f 3f       	cpi	r24, 0xFF	; 255
 164:	d1 f0       	breq	.+52     	; 0x19a <main+0x88>
 166:	ec cf       	rjmp	.-40     	; 0x140 <main+0x2e>
			{
				case LA_CMD_ANALOG:
				{
					SET( LA_REG_ADCSRA , BM(LA_BIT_ADSC) );					/* Start ADC Conversion */
 168:	36 9a       	sbi	0x06, 6	; 6
					while ( ALL_SET( LA_REG_ADCSRA, BM(LA_BIT_ADSC) ) );	/* Wait until ADC Conversion Completes */
 16a:	36 99       	sbic	0x06, 6	; 6
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0x58>
					while ( ALL_CLR( LA_REG_UCSRA , BM(LA_BIT_UDRE) ) );	/* Blocks when a previous UART transmission is not finished */
 16e:	5d 9b       	sbis	0x0b, 5	; 11
 170:	fe cf       	rjmp	.-4      	; 0x16e <main+0x5c>
					LA_REG_UDR = LA_REG_ADC;								/* Send low byte through UART */
 172:	84 b1       	in	r24, 0x04	; 4
 174:	95 b1       	in	r25, 0x05	; 5
 176:	8c b9       	out	0x0c, r24	; 12
					while ( ALL_CLR( LA_REG_UCSRA , BM(LA_BIT_UDRE) ) );	/* Blocks when a previous UART transmission is not finished */
 178:	5d 9b       	sbis	0x0b, 5	; 11
 17a:	fe cf       	rjmp	.-4      	; 0x178 <main+0x66>
					LA_REG_UDR = LA_REG_ADC>>8;								/* Send high byte through UART */
 17c:	84 b1       	in	r24, 0x04	; 4
 17e:	95 b1       	in	r25, 0x05	; 5
 180:	9c b9       	out	0x0c, r25	; 12
					break;
 182:	de cf       	rjmp	.-68     	; 0x140 <main+0x2e>
				}
				case LA_CMD_ANALOG_X2:
				{
					SET( LA_REG_ADCSRA , BM(LA_BIT_ADSC) );					/* Start ADC Conversion */
					while ( ALL_SET( LA_REG_ADCSRA, BM(LA_BIT_ADSC) ) );	/* Wait until ADC Conversion Completes */
 184:	36 99       	sbic	0x06, 6	; 6
 186:	fe cf       	rjmp	.-4      	; 0x184 <main+0x72>
					while ( ALL_CLR( LA_REG_UCSRA , BM(LA_BIT_UDRE) ) );	/* Blocks when a previous UART transmission is not finished */
 188:	5d 9b       	sbis	0x0b, 5	; 11
 18a:	fe cf       	rjmp	.-4      	; 0x188 <main+0x76>
					LA_REG_UDR = LA_REG_ADC>>2 ;							/* Send byte through UART */
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	95 b1       	in	r25, 0x05	; 5
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	1a c0       	rjmp	.+52     	; 0x1ce <main+0xbc>
					break;
				}
				case LA_CMD_DIGITAL:
				{
					while ( ALL_CLR( LA_REG_UCSRA , BM(LA_BIT_UDRE) ) );	/* Blocks when a previous UART transmission is not finished */
 19a:	5d 9b       	sbis	0x0b, 5	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <main+0x88>
					LA_REG_UDR = LA_REG_PIN;								/* Send byte through UART */
 19e:	89 b3       	in	r24, 0x19	; 25
 1a0:	16 c0       	rjmp	.+44     	; 0x1ce <main+0xbc>
					break;
				}
				case LA_CMD_DIGITAL_X2:
				{
					boost_data = (boost_data<<4) | ( LA_REG_PIN&0x0F );		/* combine 2 samples (4 bits each) in 1 byte to be transmitted */
 1a2:	29 b3       	in	r18, 0x19	; 25
 1a4:	90 91 72 00 	lds	r25, 0x0072
 1a8:	30 e1       	ldi	r19, 0x10	; 16
 1aa:	93 9f       	mul	r25, r19
 1ac:	c0 01       	movw	r24, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	92 2f       	mov	r25, r18
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	89 2b       	or	r24, r25
 1b6:	80 93 72 00 	sts	0x0072, r24
					if( (boost_counter++)& 0x01 )							/* send data though UART every 2 counts */
 1ba:	90 91 71 00 	lds	r25, 0x0071
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	29 0f       	add	r18, r25
 1c2:	20 93 71 00 	sts	0x0071, r18
 1c6:	90 ff       	sbrs	r25, 0
 1c8:	bb cf       	rjmp	.-138    	; 0x140 <main+0x2e>
					{
						while ( ALL_CLR( LA_REG_UCSRA , BM(LA_BIT_UDRE) ) );/* Blocks when a previous UART transmission is not finished */
 1ca:	5d 9b       	sbis	0x0b, 5	; 11
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <main+0xb8>
						LA_REG_UDR = boost_data;							/* Send byte through UART */
 1ce:	8c b9       	out	0x0c, r24	; 12
 1d0:	b7 cf       	rjmp	.-146    	; 0x140 <main+0x2e>

000001d2 <__vector_14>:
#define ADC_VREF_MASK       (0x03)

static void (*_Adc0_ISR)(u16 data);

ISR(ADC_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
    _Adc0_ISR( ADCL | (ADCH<<8) );
 1f4:	84 b1       	in	r24, 0x04	; 4
 1f6:	25 b1       	in	r18, 0x05	; 5
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	e0 91 73 00 	lds	r30, 0x0073
 1fe:	f0 91 74 00 	lds	r31, 0x0074
 202:	92 2b       	or	r25, r18
 204:	09 95       	icall
}
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	7f 91       	pop	r23
 214:	6f 91       	pop	r22
 216:	5f 91       	pop	r21
 218:	4f 91       	pop	r20
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <Adc0_Init>:
void Adc0_Init(u8 mode)
{
    /* ADC Disable */
    CLR(ADCSRA , BM(ADEN) );
 228:	37 98       	cbi	0x06, 7	; 6
    /* Set Voltage Reference */
    PUT(ADMUX, BM(REFS1) | BM(REFS0) , (mode&ADC_VREF_MASK)<<REFS0  );  /* Least 2 bits in mode defines CLK divisor selection */
 22a:	97 b1       	in	r25, 0x07	; 7
 22c:	28 2f       	mov	r18, r24
 22e:	22 95       	swap	r18
 230:	22 0f       	add	r18, r18
 232:	22 0f       	add	r18, r18
 234:	20 7c       	andi	r18, 0xC0	; 192
 236:	9f 73       	andi	r25, 0x3F	; 63
 238:	92 2b       	or	r25, r18
 23a:	97 b9       	out	0x07, r25	; 7
    /* Set CLK divisor*/
    PUT(ADCSRA, BM(ADPS2) | BM(ADPS1) | BM(ADPS0) , mode>>4); /* high nibble in mode defines CLK divisor selection */
 23c:	96 b1       	in	r25, 0x06	; 6
 23e:	28 2f       	mov	r18, r24
 240:	22 95       	swap	r18
 242:	27 70       	andi	r18, 0x07	; 7
 244:	98 7f       	andi	r25, 0xF8	; 248
 246:	92 2b       	or	r25, r18
 248:	96 b9       	out	0x06, r25	; 6
    /* ADC enable */
    SET(ADCSRA , BM(ADEN) );
 24a:	37 9a       	sbi	0x06, 7	; 6
    /* Set Conversion Mode */
    if( ALL_SET(mode, ADC_MODE_FREE_RUNNING ) )
 24c:	82 ff       	sbrs	r24, 2
 24e:	06 c0       	rjmp	.+12     	; 0x25c <Adc0_Init+0x34>
    {
        /* Enable Free Running Mode */
        CLR(SFIOR , BM(ADTS2) | BM(ADTS1) | BM(ADTS0) );
 250:	80 b7       	in	r24, 0x30	; 48
 252:	8f 71       	andi	r24, 0x1F	; 31
 254:	80 bf       	out	0x30, r24	; 48
        SET(ADCSRA, BM(ADATE) );
 256:	35 9a       	sbi	0x06, 5	; 6
        /* Start Conversion */
        SET(ADCSRA, BM(ADSC) );
 258:	36 9a       	sbi	0x06, 6	; 6
 25a:	08 95       	ret
    }
    else
    {
        CLR(ADCSRA, BM(ADATE) );  /* Enable Single Conversion Mode */
 25c:	35 98       	cbi	0x06, 5	; 6
 25e:	08 95       	ret

00000260 <Adc0_SetChannel>:
    }
}
void Adc0_SetChannel(u8 channel)
{
    /* Set ADC CHANNEL */
    PUT(ADMUX, ADC_MUX_MASK, channel);
 260:	97 b1       	in	r25, 0x07	; 7
 262:	8f 71       	andi	r24, 0x1F	; 31
 264:	90 7e       	andi	r25, 0xE0	; 224
 266:	89 2b       	or	r24, r25
 268:	87 b9       	out	0x07, r24	; 7
 26a:	08 95       	ret

0000026c <Gpio_Init>:
#include "gpio.h"

void Gpio_Init(u8 port, u8 pin_mask, u8 configuration)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	60 97       	sbiw	r28, 0x10	; 16
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
    volatile u8* GPIO_Dir [] = {& DDRA, & DDRB, & DDRC, & DDRD};
 280:	98 e0       	ldi	r25, 0x08	; 8
 282:	e0 e6       	ldi	r30, 0x60	; 96
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	de 01       	movw	r26, r28
 288:	19 96       	adiw	r26, 0x09	; 9
 28a:	01 90       	ld	r0, Z+
 28c:	0d 92       	st	X+, r0
 28e:	9a 95       	dec	r25
 290:	e1 f7       	brne	.-8      	; 0x28a <Gpio_Init+0x1e>
    volatile u8* GPIO_Port[] = {&PORTA, &PORTB, &PORTC, &PORTD};
 292:	98 e0       	ldi	r25, 0x08	; 8
 294:	e8 e6       	ldi	r30, 0x68	; 104
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	de 01       	movw	r26, r28
 29a:	11 96       	adiw	r26, 0x01	; 1
 29c:	01 90       	ld	r0, Z+
 29e:	0d 92       	st	X+, r0
 2a0:	9a 95       	dec	r25
 2a2:	e1 f7       	brne	.-8      	; 0x29c <Gpio_Init+0x30>

	if(port<=PERIPHERAL_GPIO_D)
 2a4:	84 30       	cpi	r24, 0x04	; 4
 2a6:	18 f5       	brcc	.+70     	; 0x2ee <Gpio_Init+0x82>
 2a8:	e8 2f       	mov	r30, r24
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
    {
        if( ALL_SET(configuration,GPIO_CONFIG_OUTPPUT) )
        {
            SET( *GPIO_Dir[port] , pin_mask );
 2ac:	ee 0f       	add	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	8c 0f       	add	r24, r28
 2b6:	9d 1f       	adc	r25, r29
 2b8:	e8 0f       	add	r30, r24
 2ba:	f9 1f       	adc	r31, r25
    volatile u8* GPIO_Dir [] = {& DDRA, & DDRB, & DDRC, & DDRD};
    volatile u8* GPIO_Port[] = {&PORTA, &PORTB, &PORTC, &PORTD};

	if(port<=PERIPHERAL_GPIO_D)
    {
        if( ALL_SET(configuration,GPIO_CONFIG_OUTPPUT) )
 2bc:	41 ff       	sbrs	r20, 1
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <Gpio_Init+0x5c>
        {
            SET( *GPIO_Dir[port] , pin_mask );
 2c0:	00 84       	ldd	r0, Z+8	; 0x08
 2c2:	f1 85       	ldd	r31, Z+9	; 0x09
 2c4:	e0 2d       	mov	r30, r0
 2c6:	0c c0       	rjmp	.+24     	; 0x2e0 <Gpio_Init+0x74>
        }
        else    /// GPIO_INPUT
        {
            CLR( *GPIO_Dir[port] , pin_mask );
 2c8:	a0 85       	ldd	r26, Z+8	; 0x08
 2ca:	b1 85       	ldd	r27, Z+9	; 0x09
 2cc:	9c 91       	ld	r25, X
 2ce:	86 2f       	mov	r24, r22
 2d0:	80 95       	com	r24
 2d2:	98 23       	and	r25, r24
 2d4:	9c 93       	st	X, r25
 2d6:	01 90       	ld	r0, Z+
 2d8:	f0 81       	ld	r31, Z
 2da:	e0 2d       	mov	r30, r0
            if( ALL_SET(configuration,GPIO_CONFIG_PULL_UP) )
 2dc:	43 ff       	sbrs	r20, 3
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <Gpio_Init+0x7c>
            {
                SET( *GPIO_Port[port] , pin_mask );
 2e0:	80 81       	ld	r24, Z
 2e2:	68 2b       	or	r22, r24
 2e4:	60 83       	st	Z, r22
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <Gpio_Init+0x82>
            }
            else    /// GPIO_NO_PULL
            {
                CLR( *GPIO_Port[port] , pin_mask );
 2e8:	90 81       	ld	r25, Z
 2ea:	89 23       	and	r24, r25
 2ec:	80 83       	st	Z, r24
            }
        }
    }
}
 2ee:	60 96       	adiw	r28, 0x10	; 16
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <Uart0_Init>:
	while((*size)<buffer_max_size && ALL_SET( UCSRA , BM(RXC) ) )
    {
        data[ (*size)++ ]=UDR;                   /* Read received byte from UART RX */
    }
    return (*size);
}
 300:	2a b1       	in	r18, 0x0a	; 10
 302:	27 7e       	andi	r18, 0xE7	; 231
 304:	2a b9       	out	0x0a, r18	; 10
 306:	59 9a       	sbi	0x0b, 1	; 11
 308:	9b 01       	movw	r18, r22
 30a:	ac 01       	movw	r20, r24
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	22 0f       	add	r18, r18
 310:	33 1f       	adc	r19, r19
 312:	44 1f       	adc	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	8a 95       	dec	r24
 318:	d1 f7       	brne	.-12     	; 0x30e <Uart0_Init+0xe>
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	74 e2       	ldi	r23, 0x24	; 36
 31e:	84 ef       	ldi	r24, 0xF4	; 244
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	22 d2       	rcall	.+1092   	; 0x768 <__udivmodsi4>
 324:	ba 01       	movw	r22, r20
 326:	a9 01       	movw	r20, r18
 328:	41 50       	subi	r20, 0x01	; 1
 32a:	51 09       	sbc	r21, r1
 32c:	61 09       	sbc	r22, r1
 32e:	71 09       	sbc	r23, r1
 330:	bb 27       	eor	r27, r27
 332:	a7 2f       	mov	r26, r23
 334:	96 2f       	mov	r25, r22
 336:	85 2f       	mov	r24, r21
 338:	80 bd       	out	0x20, r24	; 32
 33a:	49 b9       	out	0x09, r20	; 9
 33c:	80 b5       	in	r24, 0x20	; 32
 33e:	86 68       	ori	r24, 0x86	; 134
 340:	80 bd       	out	0x20, r24	; 32
 342:	8a b1       	in	r24, 0x0a	; 10
 344:	88 61       	ori	r24, 0x18	; 24
 346:	8a b9       	out	0x0a, r24	; 10
 348:	08 95       	ret

0000034a <Uart0_CbRecv>:
 34a:	90 93 76 00 	sts	0x0076, r25
 34e:	80 93 75 00 	sts	0x0075, r24
 352:	89 2b       	or	r24, r25
 354:	19 f0       	breq	.+6      	; 0x35c <Uart0_CbRecv+0x12>
 356:	57 9a       	sbi	0x0a, 7	; 10
 358:	78 94       	sei
 35a:	08 95       	ret
 35c:	57 98       	cbi	0x0a, 7	; 10
 35e:	08 95       	ret

00000360 <Uart0_PutC>:
 360:	5d 9b       	sbis	0x0b, 5	; 11
 362:	fe cf       	rjmp	.-4      	; 0x360 <Uart0_PutC>
 364:	8c b9       	out	0x0c, r24	; 12
 366:	08 95       	ret

00000368 <__vector_11>:
ISR(USART_RXC_vect)
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
    _UartReceiveCallback(UDR);
 38a:	8c b1       	in	r24, 0x0c	; 12
 38c:	e0 91 75 00 	lds	r30, 0x0075
 390:	f0 91 76 00 	lds	r31, 0x0076
 394:	09 95       	icall
}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__vector_9>:
void Timer0_SetDc(u8 duty_cycle)
{
    OCR0 = 2.55f * duty_cycle;
    if( TCNT0 > OCR0 )
    {
        TCNT0 = OCR0 - 1;
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 93       	push	r18
 3c4:	3f 93       	push	r19
 3c6:	4f 93       	push	r20
 3c8:	5f 93       	push	r21
 3ca:	6f 93       	push	r22
 3cc:	7f 93       	push	r23
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
 3d2:	af 93       	push	r26
 3d4:	bf 93       	push	r27
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31
 3da:	e0 91 84 00 	lds	r30, 0x0084
 3de:	f0 91 85 00 	lds	r31, 0x0085
 3e2:	09 95       	icall
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <__vector_19>:
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	2f 93       	push	r18
 412:	3f 93       	push	r19
 414:	4f 93       	push	r20
 416:	5f 93       	push	r21
 418:	6f 93       	push	r22
 41a:	7f 93       	push	r23
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	af 93       	push	r26
 422:	bf 93       	push	r27
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
 428:	e0 91 86 00 	lds	r30, 0x0086
 42c:	f0 91 87 00 	lds	r31, 0x0087
 430:	09 95       	icall
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	bf 91       	pop	r27
 438:	af 91       	pop	r26
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	7f 91       	pop	r23
 440:	6f 91       	pop	r22
 442:	5f 91       	pop	r21
 444:	4f 91       	pop	r20
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <__vector_8>:
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	2f 93       	push	r18
 460:	3f 93       	push	r19
 462:	4f 93       	push	r20
 464:	5f 93       	push	r21
 466:	6f 93       	push	r22
 468:	7f 93       	push	r23
 46a:	8f 93       	push	r24
 46c:	9f 93       	push	r25
 46e:	af 93       	push	r26
 470:	bf 93       	push	r27
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
 476:	e0 91 7e 00 	lds	r30, 0x007E
 47a:	f0 91 7f 00 	lds	r31, 0x007F
 47e:	09 95       	icall
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	7f 91       	pop	r23
 48e:	6f 91       	pop	r22
 490:	5f 91       	pop	r21
 492:	4f 91       	pop	r20
 494:	3f 91       	pop	r19
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <__vector_6>:
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	2f 93       	push	r18
 4ae:	3f 93       	push	r19
 4b0:	4f 93       	push	r20
 4b2:	5f 93       	push	r21
 4b4:	6f 93       	push	r22
 4b6:	7f 93       	push	r23
 4b8:	8f 93       	push	r24
 4ba:	9f 93       	push	r25
 4bc:	af 93       	push	r26
 4be:	bf 93       	push	r27
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
 4c4:	e0 91 82 00 	lds	r30, 0x0082
 4c8:	f0 91 83 00 	lds	r31, 0x0083
 4cc:	09 95       	icall
 4ce:	ff 91       	pop	r31
 4d0:	ef 91       	pop	r30
 4d2:	bf 91       	pop	r27
 4d4:	af 91       	pop	r26
 4d6:	9f 91       	pop	r25
 4d8:	8f 91       	pop	r24
 4da:	7f 91       	pop	r23
 4dc:	6f 91       	pop	r22
 4de:	5f 91       	pop	r21
 4e0:	4f 91       	pop	r20
 4e2:	3f 91       	pop	r19
 4e4:	2f 91       	pop	r18
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <__vector_7>:
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	2f 93       	push	r18
 4fc:	3f 93       	push	r19
 4fe:	4f 93       	push	r20
 500:	5f 93       	push	r21
 502:	6f 93       	push	r22
 504:	7f 93       	push	r23
 506:	8f 93       	push	r24
 508:	9f 93       	push	r25
 50a:	af 93       	push	r26
 50c:	bf 93       	push	r27
 50e:	ef 93       	push	r30
 510:	ff 93       	push	r31
 512:	e0 91 80 00 	lds	r30, 0x0080
 516:	f0 91 81 00 	lds	r31, 0x0081
 51a:	09 95       	icall
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	bf 91       	pop	r27
 522:	af 91       	pop	r26
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	7f 91       	pop	r23
 52a:	6f 91       	pop	r22
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <__vector_5>:
 53e:	1f 92       	push	r1
 540:	0f 92       	push	r0
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	0f 92       	push	r0
 546:	11 24       	eor	r1, r1
 548:	2f 93       	push	r18
 54a:	3f 93       	push	r19
 54c:	4f 93       	push	r20
 54e:	5f 93       	push	r21
 550:	6f 93       	push	r22
 552:	7f 93       	push	r23
 554:	8f 93       	push	r24
 556:	9f 93       	push	r25
 558:	af 93       	push	r26
 55a:	bf 93       	push	r27
 55c:	ef 93       	push	r30
 55e:	ff 93       	push	r31
 560:	e0 91 7c 00 	lds	r30, 0x007C
 564:	f0 91 7d 00 	lds	r31, 0x007D
 568:	09 95       	icall
 56a:	ff 91       	pop	r31
 56c:	ef 91       	pop	r30
 56e:	bf 91       	pop	r27
 570:	af 91       	pop	r26
 572:	9f 91       	pop	r25
 574:	8f 91       	pop	r24
 576:	7f 91       	pop	r23
 578:	6f 91       	pop	r22
 57a:	5f 91       	pop	r21
 57c:	4f 91       	pop	r20
 57e:	3f 91       	pop	r19
 580:	2f 91       	pop	r18
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <__vector_4>:
 58c:	1f 92       	push	r1
 58e:	0f 92       	push	r0
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	2f 93       	push	r18
 598:	3f 93       	push	r19
 59a:	4f 93       	push	r20
 59c:	5f 93       	push	r21
 59e:	6f 93       	push	r22
 5a0:	7f 93       	push	r23
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	af 93       	push	r26
 5a8:	bf 93       	push	r27
 5aa:	ef 93       	push	r30
 5ac:	ff 93       	push	r31
 5ae:	e0 91 78 00 	lds	r30, 0x0078
 5b2:	f0 91 79 00 	lds	r31, 0x0079
 5b6:	09 95       	icall
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	bf 91       	pop	r27
 5be:	af 91       	pop	r26
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	7f 91       	pop	r23
 5c6:	6f 91       	pop	r22
 5c8:	5f 91       	pop	r21
 5ca:	4f 91       	pop	r20
 5cc:	3f 91       	pop	r19
 5ce:	2f 91       	pop	r18
 5d0:	0f 90       	pop	r0
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	0f 90       	pop	r0
 5d6:	1f 90       	pop	r1
 5d8:	18 95       	reti

000005da <__vector_3>:
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	0f 92       	push	r0
 5e2:	11 24       	eor	r1, r1
 5e4:	2f 93       	push	r18
 5e6:	3f 93       	push	r19
 5e8:	4f 93       	push	r20
 5ea:	5f 93       	push	r21
 5ec:	6f 93       	push	r22
 5ee:	7f 93       	push	r23
 5f0:	8f 93       	push	r24
 5f2:	9f 93       	push	r25
 5f4:	af 93       	push	r26
 5f6:	bf 93       	push	r27
 5f8:	ef 93       	push	r30
 5fa:	ff 93       	push	r31
 5fc:	e0 91 7a 00 	lds	r30, 0x007A
 600:	f0 91 7b 00 	lds	r31, 0x007B
 604:	09 95       	icall
 606:	ff 91       	pop	r31
 608:	ef 91       	pop	r30
 60a:	bf 91       	pop	r27
 60c:	af 91       	pop	r26
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	7f 91       	pop	r23
 614:	6f 91       	pop	r22
 616:	5f 91       	pop	r21
 618:	4f 91       	pop	r20
 61a:	3f 91       	pop	r19
 61c:	2f 91       	pop	r18
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <Timer0_Reset>:
 628:	12 be       	out	0x32, r1	; 50
 62a:	08 95       	ret

0000062c <Timer0_Stop>:
 62c:	83 b7       	in	r24, 0x33	; 51
 62e:	88 7f       	andi	r24, 0xF8	; 248
 630:	83 bf       	out	0x33, r24	; 51
 632:	08 95       	ret

00000634 <Timer0_SetTime>:
    }
}
void Timer0_SetTime(u32 ticks)
{
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	00 d0       	rcall	.+0      	; 0x63a <Timer0_SetTime+0x6>
 63a:	00 d0       	rcall	.+0      	; 0x63c <Timer0_SetTime+0x8>
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
    /* pre-scaling */
    if      (ticks<=0xFF*   1UL)    {                                   _Timer0_prsc =                   BM(CS00); }
 640:	6f 3f       	cpi	r22, 0xFF	; 255
 642:	71 05       	cpc	r23, r1
 644:	81 05       	cpc	r24, r1
 646:	91 05       	cpc	r25, r1
 648:	09 f0       	breq	.+2      	; 0x64c <Timer0_SetTime+0x18>
 64a:	10 f4       	brcc	.+4      	; 0x650 <Timer0_SetTime+0x1c>
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	32 c0       	rjmp	.+100    	; 0x6b4 <Timer0_SetTime+0x80>
    else if (ticks<=0xFF*   8UL)    { ticks>>= 3; /* divide by    8*/   _Timer0_prsc =          BM(CS01)         ; }
 650:	69 3f       	cpi	r22, 0xF9	; 249
 652:	27 e0       	ldi	r18, 0x07	; 7
 654:	72 07       	cpc	r23, r18
 656:	81 05       	cpc	r24, r1
 658:	91 05       	cpc	r25, r1
 65a:	48 f4       	brcc	.+18     	; 0x66e <Timer0_SetTime+0x3a>
 65c:	53 e0       	ldi	r21, 0x03	; 3
 65e:	96 95       	lsr	r25
 660:	87 95       	ror	r24
 662:	77 95       	ror	r23
 664:	67 95       	ror	r22
 666:	5a 95       	dec	r21
 668:	d1 f7       	brne	.-12     	; 0x65e <Timer0_SetTime+0x2a>
 66a:	22 e0       	ldi	r18, 0x02	; 2
 66c:	23 c0       	rjmp	.+70     	; 0x6b4 <Timer0_SetTime+0x80>
    else if (ticks<=0xFF*  64UL)    { ticks>>= 6; /* divide by   64*/   _Timer0_prsc =          BM(CS01)|BM(CS00); }
 66e:	61 3c       	cpi	r22, 0xC1	; 193
 670:	2f e3       	ldi	r18, 0x3F	; 63
 672:	72 07       	cpc	r23, r18
 674:	81 05       	cpc	r24, r1
 676:	91 05       	cpc	r25, r1
 678:	48 f4       	brcc	.+18     	; 0x68c <Timer0_SetTime+0x58>
 67a:	46 e0       	ldi	r20, 0x06	; 6
 67c:	96 95       	lsr	r25
 67e:	87 95       	ror	r24
 680:	77 95       	ror	r23
 682:	67 95       	ror	r22
 684:	4a 95       	dec	r20
 686:	d1 f7       	brne	.-12     	; 0x67c <Timer0_SetTime+0x48>
 688:	23 e0       	ldi	r18, 0x03	; 3
 68a:	14 c0       	rjmp	.+40     	; 0x6b4 <Timer0_SetTime+0x80>
    else if (ticks<=0xFF* 256UL)    { ticks>>= 8; /* divide by  256*/   _Timer0_prsc = BM(CS02)                  ; }
 68c:	61 30       	cpi	r22, 0x01	; 1
 68e:	2f ef       	ldi	r18, 0xFF	; 255
 690:	72 07       	cpc	r23, r18
 692:	81 05       	cpc	r24, r1
 694:	91 05       	cpc	r25, r1
 696:	30 f4       	brcc	.+12     	; 0x6a4 <Timer0_SetTime+0x70>
 698:	67 2f       	mov	r22, r23
 69a:	78 2f       	mov	r23, r24
 69c:	89 2f       	mov	r24, r25
 69e:	99 27       	eor	r25, r25
 6a0:	24 e0       	ldi	r18, 0x04	; 4
 6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <Timer0_SetTime+0x80>
    else  /*(ticks<=0xFF*1024UL)*/  { ticks>>=10; /* divide by 1024*/   _Timer0_prsc = BM(CS02)         |BM(CS00); }
 6a4:	2a e0       	ldi	r18, 0x0A	; 10
 6a6:	96 95       	lsr	r25
 6a8:	87 95       	ror	r24
 6aa:	77 95       	ror	r23
 6ac:	67 95       	ror	r22
 6ae:	2a 95       	dec	r18
 6b0:	d1 f7       	brne	.-12     	; 0x6a6 <Timer0_SetTime+0x72>
 6b2:	25 e0       	ldi	r18, 0x05	; 5
 6b4:	20 93 77 00 	sts	0x0077, r18

    Timer0_Stop();
 6b8:	69 83       	std	Y+1, r22	; 0x01
 6ba:	7a 83       	std	Y+2, r23	; 0x02
 6bc:	8b 83       	std	Y+3, r24	; 0x03
 6be:	9c 83       	std	Y+4, r25	; 0x04
 6c0:	b5 df       	rcall	.-150    	; 0x62c <Timer0_Stop>
    OCR0=ticks;
 6c2:	69 81       	ldd	r22, Y+1	; 0x01
 6c4:	6c bf       	out	0x3c, r22	; 60
    SET(TCCR0, _Timer0_prsc);
 6c6:	93 b7       	in	r25, 0x33	; 51
 6c8:	80 91 77 00 	lds	r24, 0x0077
 6cc:	89 2b       	or	r24, r25
 6ce:	83 bf       	out	0x33, r24	; 51
}
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	0f 90       	pop	r0
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	08 95       	ret

000006de <Timer0_Init>:
{
	_Timer2_CMP_ISR();
}

void Timer0_Init(u8 mode, u32 ticks)
{
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	00 d0       	rcall	.+0      	; 0x6e4 <Timer0_Init+0x6>
 6e4:	00 d0       	rcall	.+0      	; 0x6e6 <Timer0_Init+0x8>
 6e6:	1f 92       	push	r1
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62
    Timer0_Stop();
 6ec:	4a 83       	std	Y+2, r20	; 0x02
 6ee:	5b 83       	std	Y+3, r21	; 0x03
 6f0:	6c 83       	std	Y+4, r22	; 0x04
 6f2:	7d 83       	std	Y+5, r23	; 0x05
 6f4:	89 83       	std	Y+1, r24	; 0x01
 6f6:	9a df       	rcall	.-204    	; 0x62c <Timer0_Stop>
    SET(TIFR, BM(OCF0) | BM(TOV0) ); /* clear flags */
 6f8:	98 b7       	in	r25, 0x38	; 56
 6fa:	93 60       	ori	r25, 0x03	; 3
 6fc:	98 bf       	out	0x38, r25	; 56

    switch(mode&TIMER_MODE_MASK) /* TIMER_MODE */
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
 700:	98 2f       	mov	r25, r24
 702:	9f 70       	andi	r25, 0x0F	; 15
 704:	4a 81       	ldd	r20, Y+2	; 0x02
 706:	5b 81       	ldd	r21, Y+3	; 0x03
 708:	6c 81       	ldd	r22, Y+4	; 0x04
 70a:	7d 81       	ldd	r23, Y+5	; 0x05
 70c:	92 30       	cpi	r25, 0x02	; 2
 70e:	39 f0       	breq	.+14     	; 0x71e <Timer0_Init+0x40>
 710:	50 f0       	brcs	.+20     	; 0x726 <Timer0_Init+0x48>
 712:	94 30       	cpi	r25, 0x04	; 4
 714:	31 f0       	breq	.+12     	; 0x722 <Timer0_Init+0x44>
 716:	98 30       	cpi	r25, 0x08	; 8
 718:	31 f4       	brne	.+12     	; 0x726 <Timer0_Init+0x48>
    {
        case TIMER_MODE_NORMAL  : {TCCR0 = BM(FOC0)                        ;break;}
        case TIMER_MODE_PWM     : {TCCR0 = BM(FOC0)             | BM(WGM00);break;}
        case TIMER_MODE_CTC     : {TCCR0 = BM(FOC0) | BM(WGM01)            ;break;}
        case TIMER_MODE_FAST_PWM: {TCCR0 = BM(FOC0) | BM(WGM01) | BM(WGM00);break;}
 71a:	98 ec       	ldi	r25, 0xC8	; 200
 71c:	05 c0       	rjmp	.+10     	; 0x728 <Timer0_Init+0x4a>
    SET(TIFR, BM(OCF0) | BM(TOV0) ); /* clear flags */

    switch(mode&TIMER_MODE_MASK) /* TIMER_MODE */
    {
        case TIMER_MODE_NORMAL  : {TCCR0 = BM(FOC0)                        ;break;}
        case TIMER_MODE_PWM     : {TCCR0 = BM(FOC0)             | BM(WGM00);break;}
 71e:	90 ec       	ldi	r25, 0xC0	; 192
 720:	03 c0       	rjmp	.+6      	; 0x728 <Timer0_Init+0x4a>
        case TIMER_MODE_CTC     : {TCCR0 = BM(FOC0) | BM(WGM01)            ;break;}
 722:	98 e8       	ldi	r25, 0x88	; 136
 724:	01 c0       	rjmp	.+2      	; 0x728 <Timer0_Init+0x4a>
        case TIMER_MODE_FAST_PWM: {TCCR0 = BM(FOC0) | BM(WGM01) | BM(WGM00);break;}
        default /*Mode Normal*/ : {TCCR0 = BM(FOC0)                        ;break;}
 726:	90 e8       	ldi	r25, 0x80	; 128
 728:	93 bf       	out	0x33, r25	; 51
    }

    CLR(TCCR0, BM(COM01) | BM(COM00) );
 72a:	93 b7       	in	r25, 0x33	; 51
 72c:	9f 7c       	andi	r25, 0xCF	; 207
 72e:	93 bf       	out	0x33, r25	; 51
    switch(mode&TIMER_COM_MASK) /* TIMER_COMPARE_OUTPUT_MODE */
 730:	80 7f       	andi	r24, 0xF0	; 240
 732:	80 34       	cpi	r24, 0x40	; 64
 734:	39 f0       	breq	.+14     	; 0x744 <Timer0_Init+0x66>
 736:	80 38       	cpi	r24, 0x80	; 128
 738:	41 f0       	breq	.+16     	; 0x74a <Timer0_Init+0x6c>
 73a:	80 32       	cpi	r24, 0x20	; 32
 73c:	51 f4       	brne	.+20     	; 0x752 <Timer0_Init+0x74>
    {
        case TIMER_COM_OFF: {                                                             break;}
        case TIMER_COM_TGL: {SET(TCCR0,             BM(COM00) ); SET(OC0_DIR_R, BM(OC0)); break;}
 73e:	83 b7       	in	r24, 0x33	; 51
 740:	80 61       	ori	r24, 0x10	; 16
 742:	05 c0       	rjmp	.+10     	; 0x74e <Timer0_Init+0x70>
        case TIMER_COM_CLR: {SET(TCCR0, BM(COM01)             ); SET(OC0_DIR_R, BM(OC0)); break;}
 744:	83 b7       	in	r24, 0x33	; 51
 746:	80 62       	ori	r24, 0x20	; 32
 748:	02 c0       	rjmp	.+4      	; 0x74e <Timer0_Init+0x70>
        case TIMER_COM_SET: {SET(TCCR0, BM(COM01) | BM(COM00) ); SET(OC0_DIR_R, BM(OC0)); break;}
 74a:	83 b7       	in	r24, 0x33	; 51
 74c:	80 63       	ori	r24, 0x30	; 48
 74e:	83 bf       	out	0x33, r24	; 51
 750:	bb 9a       	sbi	0x17, 3	; 23
        default  /*OFF*/  : {                                                             break;}
    }

    Timer0_SetTime(ticks);
 752:	cb 01       	movw	r24, r22
 754:	ba 01       	movw	r22, r20
}
 756:	0f 90       	pop	r0
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
        case TIMER_COM_CLR: {SET(TCCR0, BM(COM01)             ); SET(OC0_DIR_R, BM(OC0)); break;}
        case TIMER_COM_SET: {SET(TCCR0, BM(COM01) | BM(COM00) ); SET(OC0_DIR_R, BM(OC0)); break;}
        default  /*OFF*/  : {                                                             break;}
    }

    Timer0_SetTime(ticks);
 764:	67 cf       	rjmp	.-306    	; 0x634 <Timer0_SetTime>

00000766 <Timer0_SetCmpMatch>:
    OCR0=ticks;
    SET(TCCR0, _Timer0_prsc);
}
void Timer0_SetCmpMatch(u32 ticks)
{
    Timer0_SetTime(ticks);
 766:	66 cf       	rjmp	.-308    	; 0x634 <Timer0_SetTime>

00000768 <__udivmodsi4>:
 768:	a1 e2       	ldi	r26, 0x21	; 33
 76a:	1a 2e       	mov	r1, r26
 76c:	aa 1b       	sub	r26, r26
 76e:	bb 1b       	sub	r27, r27
 770:	fd 01       	movw	r30, r26
 772:	0d c0       	rjmp	.+26     	; 0x78e <__udivmodsi4_ep>

00000774 <__udivmodsi4_loop>:
 774:	aa 1f       	adc	r26, r26
 776:	bb 1f       	adc	r27, r27
 778:	ee 1f       	adc	r30, r30
 77a:	ff 1f       	adc	r31, r31
 77c:	a2 17       	cp	r26, r18
 77e:	b3 07       	cpc	r27, r19
 780:	e4 07       	cpc	r30, r20
 782:	f5 07       	cpc	r31, r21
 784:	20 f0       	brcs	.+8      	; 0x78e <__udivmodsi4_ep>
 786:	a2 1b       	sub	r26, r18
 788:	b3 0b       	sbc	r27, r19
 78a:	e4 0b       	sbc	r30, r20
 78c:	f5 0b       	sbc	r31, r21

0000078e <__udivmodsi4_ep>:
 78e:	66 1f       	adc	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	1a 94       	dec	r1
 798:	69 f7       	brne	.-38     	; 0x774 <__udivmodsi4_loop>
 79a:	60 95       	com	r22
 79c:	70 95       	com	r23
 79e:	80 95       	com	r24
 7a0:	90 95       	com	r25
 7a2:	9b 01       	movw	r18, r22
 7a4:	ac 01       	movw	r20, r24
 7a6:	bd 01       	movw	r22, r26
 7a8:	cf 01       	movw	r24, r30
 7aa:	08 95       	ret

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
