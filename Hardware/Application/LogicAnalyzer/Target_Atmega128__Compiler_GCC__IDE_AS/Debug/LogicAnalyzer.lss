
LogicAnalyzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000ac4  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080011c  0080011c  00000b74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ba4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001df9  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000733  00000000  00000000  00002d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001682  00000000  00000000  000034a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000db8  00000000  00000000  00004b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bcc  00000000  00000000  000058e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002414  00000000  00000000  000064ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  000088c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	6c c3       	rjmp	.+1752   	; 0x6fe <__vector_9>
  26:	00 00       	nop
  28:	3f c3       	rjmp	.+1662   	; 0x6a8 <__vector_10>
  2a:	00 00       	nop
  2c:	12 c3       	rjmp	.+1572   	; 0x652 <__vector_11>
  2e:	00 00       	nop
  30:	8f c2       	rjmp	.+1310   	; 0x550 <__vector_12>
  32:	00 00       	nop
  34:	b8 c2       	rjmp	.+1392   	; 0x5a6 <__vector_13>
  36:	00 00       	nop
  38:	60 c2       	rjmp	.+1216   	; 0x4fa <__vector_14>
  3a:	00 00       	nop
  3c:	33 c2       	rjmp	.+1126   	; 0x4a4 <__vector_15>
  3e:	00 00       	nop
  40:	06 c2       	rjmp	.+1036   	; 0x44e <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	79 c1       	rjmp	.+754    	; 0x33c <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	dc c0       	rjmp	.+440    	; 0x20e <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	cd c2       	rjmp	.+1434   	; 0x5fc <__vector_24>
  62:	00 00       	nop
  64:	23 c4       	rjmp	.+2118   	; 0x8ac <__vector_25>
  66:	00 00       	nop
  68:	a0 c3       	rjmp	.+1856   	; 0x7aa <__vector_26>
  6a:	00 00       	nop
  6c:	c9 c3       	rjmp	.+1938   	; 0x800 <__vector_27>
  6e:	00 00       	nop
  70:	f2 c3       	rjmp	.+2020   	; 0x856 <__vector_28>
  72:	00 00       	nop
  74:	6f c3       	rjmp	.+1758   	; 0x754 <__vector_29>
  76:	00 00       	nop
  78:	8d c1       	rjmp	.+794    	; 0x394 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 34       	cpi	r26, 0x42	; 66
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	45 d0       	rcall	.+138    	; 0x14e <main>
  c4:	fd c4       	rjmp	.+2554   	; 0xac0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <receive_command>:
	
	return 0;
}

void receive_command(u8 cmd)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
}
_INLINE_ void Timer_Stop(u8 timer)
{
    switch(timer)
    {
        case PERIPHERAL_TIMER_0: {return Timer0_Stop(); break;}
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	18 d4       	rcall	.+2096   	; 0x906 <Timer0_Stop>
}
_INLINE_ void Timer_Reset(u8 timer)
{
    switch(timer)
    {
        case PERIPHERAL_TIMER_0: {return Timer0_Reset(); break;}
  d6:	15 d4       	rcall	.+2090   	; 0x902 <Timer0_Reset>
	Timer_Stop(LA_TIMER);   /* Stops the timer if running to parse command */
	Timer_Reset(LA_TIMER);  /* Reset the timer for next data stream */
	boost_counter=0;        /* Reset Counter for the next data stream */
  d8:	10 92 1d 01 	sts	0x011D, r1
	switch(cmd)
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	8c 3f       	cpi	r24, 0xFC	; 252
  e0:	b1 f0       	breq	.+44     	; 0x10e <receive_command+0x46>
  e2:	50 f4       	brcc	.+20     	; 0xf8 <receive_command+0x30>
  e4:	8a 3f       	cpi	r24, 0xFA	; 250
  e6:	31 f1       	breq	.+76     	; 0x134 <receive_command+0x6c>
  e8:	18 f5       	brcc	.+70     	; 0x130 <receive_command+0x68>
  ea:	8a 3a       	cpi	r24, 0xAA	; 170
  ec:	51 f5       	brne	.+84     	; 0x142 <receive_command+0x7a>
}
_INLINE_ void Uart_PutC(u8 uart, u8 data)
{
    switch(uart)
    {
        case PERIPHERAL_UART_0: {return Uart0_PutC(data); break;}
  ee:	8a ea       	ldi	r24, 0xAA	; 170
			mode = LA_CMD_OFF;
			/* Timer is already stopped */
			break;
		}
	}
}
  f0:	0f 90       	pop	r0
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	a7 c1       	rjmp	.+846    	; 0x446 <Uart0_PutC>
void receive_command(u8 cmd)
{
	Timer_Stop(LA_TIMER);   /* Stops the timer if running to parse command */
	Timer_Reset(LA_TIMER);  /* Reset the timer for next data stream */
	boost_counter=0;        /* Reset Counter for the next data stream */
	switch(cmd)
  f8:	8e 3f       	cpi	r24, 0xFE	; 254
  fa:	99 f0       	breq	.+38     	; 0x122 <receive_command+0x5a>
  fc:	40 f4       	brcc	.+16     	; 0x10e <receive_command+0x46>
	{
		case LA_CMD_ANALOG:
		{
			mode = LA_CMD_ANALOG;
  fe:	8d ef       	ldi	r24, 0xFD	; 253
 100:	80 93 1c 01 	sts	0x011C, r24
}
_INLINE_ void Timer_SetCmpMatch(u8 timer, u32 ticks)
{
    switch(timer)
    {
        case PERIPHERAL_TIMER_0: {return Timer0_SetCmpMatch(ticks); break;}
 104:	6f e9       	ldi	r22, 0x9F	; 159
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	06 c0       	rjmp	.+12     	; 0x11a <receive_command+0x52>
			break;
		}
		case LA_CMD_ANALOG_X2:
		case LA_CMD_DIGITAL:
		{
			mode = cmd;
 10e:	80 93 1c 01 	sts	0x011C, r24
 112:	6f e4       	ldi	r22, 0x4F	; 79
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
			mode = LA_CMD_OFF;
			/* Timer is already stopped */
			break;
		}
	}
}
 11a:	0f 90       	pop	r0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	ac c4       	rjmp	.+2392   	; 0xa7a <Timer0_SetCmpMatch>
			Timer_SetCmpMatch(LA_TIMER, LA_TIMER_TICKS_D);
			break;
		}
		case LA_CMD_DIGITAL_X2:
		{
			mode = LA_CMD_DIGITAL_X2;
 122:	80 93 1c 01 	sts	0x011C, r24
 126:	67 e2       	ldi	r22, 0x27	; 39
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	f5 cf       	rjmp	.-22     	; 0x11a <receive_command+0x52>
			break;
		}
		case LA_CMD_PULLUP_ON:
		{
			/* enable Pull-up resistances on digital input */
			Gpio_Init(LA_GPIO, 0xFF, GPIO_CONFIG_INPPUT|GPIO_CONFIG_PULL_UP);
 130:	49 e0       	ldi	r20, 0x09	; 9
 132:	01 c0       	rjmp	.+2      	; 0x136 <receive_command+0x6e>
			break;
		}
		case LA_CMD_PULLUP_OFF:
		{
			/* disable Pull-up resistances on digital input */
			Gpio_Init(LA_GPIO, 0xFF, GPIO_CONFIG_INPPUT|GPIO_CONFIG_NO_PULL);
 134:	45 e0       	ldi	r20, 0x05	; 5
 136:	6f ef       	ldi	r22, 0xFF	; 255
 138:	80 e0       	ldi	r24, 0x00	; 0
			mode = LA_CMD_OFF;
			/* Timer is already stopped */
			break;
		}
	}
}
 13a:	0f 90       	pop	r0
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
			break;
		}
		case LA_CMD_PULLUP_OFF:
		{
			/* disable Pull-up resistances on digital input */
			Gpio_Init(LA_GPIO, 0xFF, GPIO_CONFIG_INPPUT|GPIO_CONFIG_NO_PULL);
 140:	b3 c0       	rjmp	.+358    	; 0x2a8 <Gpio_Init>
			break;
		}
		case LA_CMD_OFF:
		default:
		{
			mode = LA_CMD_OFF;
 142:	10 92 1c 01 	sts	0x011C, r1
			/* Timer is already stopped */
			break;
		}
	}
}
 146:	0f 90       	pop	r0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <main>:

int main(void)
{

	/* Initialize System Peripherals */
	Gpio_Init(LA_GPIO, 0xFF, GPIO_CONFIG_INPPUT|GPIO_CONFIG_PULL_UP);   /* Digital Input */
 14e:	49 e0       	ldi	r20, 0x09	; 9
 150:	6f ef       	ldi	r22, 0xFF	; 255
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	a9 d0       	rcall	.+338    	; 0x2a8 <Gpio_Init>

_INLINE_ void Adc_Init(u8 adc, u8 mode)
{
    switch(adc)
    {
        case PERIPHERAL_ADC_0: {return Adc0_Init(mode); break;}
 156:	89 e0       	ldi	r24, 0x09	; 9
 158:	89 d0       	rcall	.+274    	; 0x26c <Adc0_Init>
}
_INLINE_ void Adc_SetChannel(u8 adc, u8 channel)
{
    switch(adc)
    {
        case PERIPHERAL_ADC_0: {return Adc0_SetChannel(channel); break;}
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	9f d0       	rcall	.+318    	; 0x29c <Adc0_SetChannel>

_INLINE_ void Timer_Init(u8 timer, u8 mode, u32 ticks)
{
    switch(timer)
    {
        case PERIPHERAL_TIMER_0: {return Timer0_Init(mode,ticks); break;}
 15e:	4f e4       	ldi	r20, 0x4F	; 79
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	45 d4       	rcall	.+2186   	; 0x9f4 <Timer0_Init>
}
_INLINE_ void Timer_Stop(u8 timer)
{
    switch(timer)
    {
        case PERIPHERAL_TIMER_0: {return Timer0_Stop(); break;}
 16a:	cd d3       	rcall	.+1946   	; 0x906 <Timer0_Stop>

_INLINE_ void Uart_Init(u8 uart, u32 baud)
{
    switch(uart)
    {
        case PERIPHERAL_UART_0: {return Uart0_Init(baud); break;}
 16c:	60 e8       	ldi	r22, 0x80	; 128
 16e:	74 e8       	ldi	r23, 0x84	; 132
 170:	8e e1       	ldi	r24, 0x1E	; 30
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	3c d1       	rcall	.+632    	; 0x3ee <Uart0_Init>
}
_INLINE_ void Uart_CbRecv(u8 uart, void (*receive_cb)(u8 data) )
{
    switch(uart)
    {
        case PERIPHERAL_UART_0: {return Uart0_CbRecv(receive_cb); break;}
 176:	84 e6       	ldi	r24, 0x64	; 100
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	5a d1       	rcall	.+692    	; 0x430 <Uart0_CbRecv>
	*/
	
	/* Program Main Loop */
	while(1)
	{
		if (ALL_SET( LA_REG_TIFR , BM(LA_BIT_OCF) ))	/* check if Timer Compare Match occurred */
 17c:	06 b6       	in	r0, 0x36	; 54
 17e:	01 fe       	sbrs	r0, 1
 180:	fd cf       	rjmp	.-6      	; 0x17c <main+0x2e>
		{
			SET( LA_REG_TIFR , BM(LA_BIT_OCF) );		/* Clear Timer Compare Match Flag */
 182:	86 b7       	in	r24, 0x36	; 54
 184:	82 60       	ori	r24, 0x02	; 2
 186:	86 bf       	out	0x36, r24	; 54
			switch(mode)
 188:	80 91 1c 01 	lds	r24, 0x011C
 18c:	8d 3f       	cpi	r24, 0xFD	; 253
 18e:	51 f0       	breq	.+20     	; 0x1a4 <main+0x56>
 190:	20 f4       	brcc	.+8      	; 0x19a <main+0x4c>
 192:	8c 3f       	cpi	r24, 0xFC	; 252
 194:	99 f7       	brne	.-26     	; 0x17c <main+0x2e>
					LA_REG_UDR = LA_REG_ADC>>8;								/* Send high byte through UART */
					break;
				}
				case LA_CMD_ANALOG_X2:
				{
					SET( LA_REG_ADCSRA , BM(LA_BIT_ADSC) );					/* Start ADC Conversion */
 196:	36 9a       	sbi	0x06, 6	; 6
					while ( ALL_SET( LA_REG_ADCSRA, BM(LA_BIT_ADSC) ) );	/* Wait until ADC Conversion Completes */
 198:	13 c0       	rjmp	.+38     	; 0x1c0 <main+0x72>
	while(1)
	{
		if (ALL_SET( LA_REG_TIFR , BM(LA_BIT_OCF) ))	/* check if Timer Compare Match occurred */
		{
			SET( LA_REG_TIFR , BM(LA_BIT_OCF) );		/* Clear Timer Compare Match Flag */
			switch(mode)
 19a:	8e 3f       	cpi	r24, 0xFE	; 254
 19c:	01 f1       	breq	.+64     	; 0x1de <main+0x90>
 19e:	8f 3f       	cpi	r24, 0xFF	; 255
 1a0:	d1 f0       	breq	.+52     	; 0x1d6 <main+0x88>
 1a2:	ec cf       	rjmp	.-40     	; 0x17c <main+0x2e>
			{
				case LA_CMD_ANALOG:
				{
					SET( LA_REG_ADCSRA , BM(LA_BIT_ADSC) );					/* Start ADC Conversion */
 1a4:	36 9a       	sbi	0x06, 6	; 6
					while ( ALL_SET( LA_REG_ADCSRA, BM(LA_BIT_ADSC) ) );	/* Wait until ADC Conversion Completes */
 1a6:	36 99       	sbic	0x06, 6	; 6
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <main+0x58>
					while ( ALL_CLR( LA_REG_UCSRA , BM(LA_BIT_UDRE) ) );	/* Blocks when a previous UART transmission is not finished */
 1aa:	5d 9b       	sbis	0x0b, 5	; 11
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <main+0x5c>
					LA_REG_UDR = LA_REG_ADC;								/* Send low byte through UART */
 1ae:	84 b1       	in	r24, 0x04	; 4
 1b0:	95 b1       	in	r25, 0x05	; 5
 1b2:	8c b9       	out	0x0c, r24	; 12
					while ( ALL_CLR( LA_REG_UCSRA , BM(LA_BIT_UDRE) ) );	/* Blocks when a previous UART transmission is not finished */
 1b4:	5d 9b       	sbis	0x0b, 5	; 11
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <main+0x66>
					LA_REG_UDR = LA_REG_ADC>>8;								/* Send high byte through UART */
 1b8:	84 b1       	in	r24, 0x04	; 4
 1ba:	95 b1       	in	r25, 0x05	; 5
 1bc:	9c b9       	out	0x0c, r25	; 12
					break;
 1be:	de cf       	rjmp	.-68     	; 0x17c <main+0x2e>
				}
				case LA_CMD_ANALOG_X2:
				{
					SET( LA_REG_ADCSRA , BM(LA_BIT_ADSC) );					/* Start ADC Conversion */
					while ( ALL_SET( LA_REG_ADCSRA, BM(LA_BIT_ADSC) ) );	/* Wait until ADC Conversion Completes */
 1c0:	36 99       	sbic	0x06, 6	; 6
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <main+0x72>
					while ( ALL_CLR( LA_REG_UCSRA , BM(LA_BIT_UDRE) ) );	/* Blocks when a previous UART transmission is not finished */
 1c4:	5d 9b       	sbis	0x0b, 5	; 11
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <main+0x76>
					LA_REG_UDR = LA_REG_ADC>>2 ;							/* Send byte through UART */
 1c8:	84 b1       	in	r24, 0x04	; 4
 1ca:	95 b1       	in	r25, 0x05	; 5
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	1a c0       	rjmp	.+52     	; 0x20a <main+0xbc>
					break;
				}
				case LA_CMD_DIGITAL:
				{
					while ( ALL_CLR( LA_REG_UCSRA , BM(LA_BIT_UDRE) ) );	/* Blocks when a previous UART transmission is not finished */
 1d6:	5d 9b       	sbis	0x0b, 5	; 11
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <main+0x88>
					LA_REG_UDR = LA_REG_PIN;								/* Send byte through UART */
 1da:	89 b3       	in	r24, 0x19	; 25
 1dc:	16 c0       	rjmp	.+44     	; 0x20a <main+0xbc>
					break;
				}
				case LA_CMD_DIGITAL_X2:
				{
					boost_data = (boost_data<<4) | ( LA_REG_PIN&0x0F );		/* combine 2 samples (4 bits each) in 1 byte to be transmitted */
 1de:	29 b3       	in	r18, 0x19	; 25
 1e0:	90 91 1e 01 	lds	r25, 0x011E
 1e4:	30 e1       	ldi	r19, 0x10	; 16
 1e6:	93 9f       	mul	r25, r19
 1e8:	c0 01       	movw	r24, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	92 2f       	mov	r25, r18
 1ee:	9f 70       	andi	r25, 0x0F	; 15
 1f0:	89 2b       	or	r24, r25
 1f2:	80 93 1e 01 	sts	0x011E, r24
					if( (boost_counter++)& 0x01 )							/* send data though UART every 2 counts */
 1f6:	90 91 1d 01 	lds	r25, 0x011D
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	29 0f       	add	r18, r25
 1fe:	20 93 1d 01 	sts	0x011D, r18
 202:	90 ff       	sbrs	r25, 0
 204:	bb cf       	rjmp	.-138    	; 0x17c <main+0x2e>
					{
						while ( ALL_CLR( LA_REG_UCSRA , BM(LA_BIT_UDRE) ) );/* Blocks when a previous UART transmission is not finished */
 206:	5d 9b       	sbis	0x0b, 5	; 11
 208:	fe cf       	rjmp	.-4      	; 0x206 <main+0xb8>
						LA_REG_UDR = boost_data;							/* Send byte through UART */
 20a:	8c b9       	out	0x0c, r24	; 12
 20c:	b7 cf       	rjmp	.-146    	; 0x17c <main+0x2e>

0000020e <__vector_21>:
#define ADC_VREF_MASK       (0x03)

static void (*_Adc0_ISR)(u16 data);

ISR(ADC_vect)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	0b b6       	in	r0, 0x3b	; 59
 21a:	0f 92       	push	r0
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
    _Adc0_ISR( ADCL | (ADCH<<8) );
 234:	84 b1       	in	r24, 0x04	; 4
 236:	25 b1       	in	r18, 0x05	; 5
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	e0 91 1f 01 	lds	r30, 0x011F
 23e:	f0 91 20 01 	lds	r31, 0x0120
 242:	92 2b       	or	r25, r18
 244:	09 95       	icall
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	7f 91       	pop	r23
 254:	6f 91       	pop	r22
 256:	5f 91       	pop	r21
 258:	4f 91       	pop	r20
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0b be       	out	0x3b, r0	; 59
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <Adc0_Init>:
void Adc0_Init(u8 mode)
{
    /* Set Voltage Reference */
    PUT(ADMUX, BM(REFS1) | BM(REFS0) , (mode&ADC_VREF_MASK)<<REFS0  );  /* Least 2 bits in mode defines CLK divisor selection */
 26c:	97 b1       	in	r25, 0x07	; 7
 26e:	28 2f       	mov	r18, r24
 270:	22 95       	swap	r18
 272:	22 0f       	add	r18, r18
 274:	22 0f       	add	r18, r18
 276:	20 7c       	andi	r18, 0xC0	; 192
 278:	9f 73       	andi	r25, 0x3F	; 63
 27a:	92 2b       	or	r25, r18
 27c:	97 b9       	out	0x07, r25	; 7
    /* Set CLK divisor*/
    PUT(ADCSRA, BM(ADPS2) | BM(ADPS1) | BM(ADPS0) , mode>>4); /* high nibble in mode defines CLK divisor selection */
 27e:	96 b1       	in	r25, 0x06	; 6
 280:	28 2f       	mov	r18, r24
 282:	22 95       	swap	r18
 284:	27 70       	andi	r18, 0x07	; 7
 286:	98 7f       	andi	r25, 0xF8	; 248
 288:	92 2b       	or	r25, r18
 28a:	96 b9       	out	0x06, r25	; 6
    /* ADC enable */
    SET(ADCSRA , BM(ADEN) );
 28c:	37 9a       	sbi	0x06, 7	; 6
    /* Set Conversion Mode */
    if( ALL_SET(mode, ADC_MODE_FREE_RUNNING ) )
 28e:	82 ff       	sbrs	r24, 2
 290:	03 c0       	rjmp	.+6      	; 0x298 <Adc0_Init+0x2c>
    {
        SET(ADCSRA, BM(ADFR) ); /* Enable Free Running Mode */
 292:	35 9a       	sbi	0x06, 5	; 6
        SET(ADCSRA, BM(ADSC) ); /* Start Conversion */
 294:	36 9a       	sbi	0x06, 6	; 6
 296:	08 95       	ret
    }
    else
    {
        CLR(ADCSRA, BM(ADFR) );  /* Enable Single Conversion Mode */
 298:	35 98       	cbi	0x06, 5	; 6
 29a:	08 95       	ret

0000029c <Adc0_SetChannel>:
    }
}
void Adc0_SetChannel(u8 channel)
{
    /* Set ADC CHANNEL */
    PUT(ADMUX, ADC_MUX_MASK, channel);
 29c:	97 b1       	in	r25, 0x07	; 7
 29e:	8f 71       	andi	r24, 0x1F	; 31
 2a0:	90 7e       	andi	r25, 0xE0	; 224
 2a2:	89 2b       	or	r24, r25
 2a4:	87 b9       	out	0x07, r24	; 7
 2a6:	08 95       	ret

000002a8 <Gpio_Init>:
#include "gpio.h"

void Gpio_Init(u8 port, u8 pin_mask, u8 configuration)
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	6c 97       	sbiw	r28, 0x1c	; 28
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
    volatile u8* GPIO_Dir [] = {& DDRA, & DDRB, & DDRC, & DDRD, & DDRE, & DDRF, & DDRG};
 2bc:	9e e0       	ldi	r25, 0x0E	; 14
 2be:	e0 e0       	ldi	r30, 0x00	; 0
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	de 01       	movw	r26, r28
 2c4:	1f 96       	adiw	r26, 0x0f	; 15
 2c6:	01 90       	ld	r0, Z+
 2c8:	0d 92       	st	X+, r0
 2ca:	9a 95       	dec	r25
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <Gpio_Init+0x1e>
    volatile u8* GPIO_Port[] = {&PORTA, &PORTB, &PORTC, &PORTD, &PORTE, &PORTF, &PORTG};
 2ce:	9e e0       	ldi	r25, 0x0E	; 14
 2d0:	ee e0       	ldi	r30, 0x0E	; 14
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
 2d4:	de 01       	movw	r26, r28
 2d6:	11 96       	adiw	r26, 0x01	; 1
 2d8:	01 90       	ld	r0, Z+
 2da:	0d 92       	st	X+, r0
 2dc:	9a 95       	dec	r25
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <Gpio_Init+0x30>

	if(port<=PERIPHERAL_GPIO_G)
 2e0:	87 30       	cpi	r24, 0x07	; 7
 2e2:	18 f5       	brcc	.+70     	; 0x32a <Gpio_Init+0x82>
 2e4:	e8 2f       	mov	r30, r24
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
    {
        if( ALL_SET(configuration,GPIO_CONFIG_OUTPPUT) )
        {
            SET( *GPIO_Dir[port] , pin_mask );
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	8c 0f       	add	r24, r28
 2f2:	9d 1f       	adc	r25, r29
 2f4:	e8 0f       	add	r30, r24
 2f6:	f9 1f       	adc	r31, r25
    volatile u8* GPIO_Dir [] = {& DDRA, & DDRB, & DDRC, & DDRD, & DDRE, & DDRF, & DDRG};
    volatile u8* GPIO_Port[] = {&PORTA, &PORTB, &PORTC, &PORTD, &PORTE, &PORTF, &PORTG};

	if(port<=PERIPHERAL_GPIO_G)
    {
        if( ALL_SET(configuration,GPIO_CONFIG_OUTPPUT) )
 2f8:	41 ff       	sbrs	r20, 1
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <Gpio_Init+0x5c>
        {
            SET( *GPIO_Dir[port] , pin_mask );
 2fc:	06 84       	ldd	r0, Z+14	; 0x0e
 2fe:	f7 85       	ldd	r31, Z+15	; 0x0f
 300:	e0 2d       	mov	r30, r0
 302:	0c c0       	rjmp	.+24     	; 0x31c <Gpio_Init+0x74>
        }
        else    /// GPIO_INPUT
        {
            CLR( *GPIO_Dir[port] , pin_mask );
 304:	a6 85       	ldd	r26, Z+14	; 0x0e
 306:	b7 85       	ldd	r27, Z+15	; 0x0f
 308:	9c 91       	ld	r25, X
 30a:	86 2f       	mov	r24, r22
 30c:	80 95       	com	r24
 30e:	98 23       	and	r25, r24
 310:	9c 93       	st	X, r25
 312:	01 90       	ld	r0, Z+
 314:	f0 81       	ld	r31, Z
 316:	e0 2d       	mov	r30, r0
            if( ALL_SET(configuration,GPIO_CONFIG_PULL_UP) )
 318:	43 ff       	sbrs	r20, 3
 31a:	04 c0       	rjmp	.+8      	; 0x324 <Gpio_Init+0x7c>
            {
                SET( *GPIO_Port[port] , pin_mask );
 31c:	80 81       	ld	r24, Z
 31e:	68 2b       	or	r22, r24
 320:	60 83       	st	Z, r22
 322:	03 c0       	rjmp	.+6      	; 0x32a <Gpio_Init+0x82>
            }
            else    /// GPIO_NO_PULL
            {
                CLR( *GPIO_Port[port] , pin_mask );
 324:	90 81       	ld	r25, Z
 326:	89 23       	and	r24, r25
 328:	80 83       	st	Z, r24
            }
        }
    }
}
 32a:	6c 96       	adiw	r28, 0x1c	; 28
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <__vector_18>:

static void (*_Uart0ReceiveCallback)(u8 data);
static void (*_Uart1ReceiveCallback)(u8 data);

ISR(USART0_RX_vect)
{
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	0b b6       	in	r0, 0x3b	; 59
 348:	0f 92       	push	r0
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
    _Uart0ReceiveCallback(UDR0);
 362:	8c b1       	in	r24, 0x0c	; 12
 364:	e0 91 23 01 	lds	r30, 0x0123
 368:	f0 91 24 01 	lds	r31, 0x0124
 36c:	09 95       	icall
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	5f 91       	pop	r21
 380:	4f 91       	pop	r20
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	0f 90       	pop	r0
 388:	0b be       	out	0x3b, r0	; 59
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__vector_30>:
ISR(USART1_RX_vect)
{
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	0b b6       	in	r0, 0x3b	; 59
 3a0:	0f 92       	push	r0
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	4f 93       	push	r20
 3a8:	5f 93       	push	r21
 3aa:	6f 93       	push	r22
 3ac:	7f 93       	push	r23
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	af 93       	push	r26
 3b4:	bf 93       	push	r27
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
    _Uart1ReceiveCallback(UDR1);
 3ba:	80 91 9c 00 	lds	r24, 0x009C
 3be:	e0 91 21 01 	lds	r30, 0x0121
 3c2:	f0 91 22 01 	lds	r31, 0x0122
 3c6:	09 95       	icall
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0b be       	out	0x3b, r0	; 59
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <Uart0_Init>:

/// UART 0
void Uart0_Init(u32 baud)
{
 3ee:	9b 01       	movw	r18, r22
 3f0:	ac 01       	movw	r20, r24
    CLR( UCSR0B , BM(TXEN0) | BM(RXEN0) );            /* Disable UART TX/RX */
 3f2:	8a b1       	in	r24, 0x0a	; 10
 3f4:	87 7e       	andi	r24, 0xE7	; 231
 3f6:	8a b9       	out	0x0a, r24	; 10
#if UART_CLK_DIVIDER == 8
    SET( UCSR0A , BM(U2X0) );                         /* Double transfer mode */
 3f8:	59 9a       	sbi	0x0b, 1	; 11
#elif UART_CLK_DIVIDER == 16
    CLR( UCSR0A , BM(U2X0) );                         /* Normal transfer mode */
#else
    #error Invalid "UART_CLK_DIVIDER", only values {8,16} are allowed
#endif
    u32 baud_rate= F_CPU/baud/UART_CLK_DIVIDER - 1;     /* change 8 to 16 if U2X mode is disabled */
 3fa:	60 e8       	ldi	r22, 0x80	; 128
 3fc:	74 e8       	ldi	r23, 0x84	; 132
 3fe:	8e e1       	ldi	r24, 0x1E	; 30
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	3c d3       	rcall	.+1656   	; 0xa7c <__udivmodsi4>
 404:	ba 01       	movw	r22, r20
 406:	a9 01       	movw	r20, r18
 408:	41 50       	subi	r20, 0x01	; 1
 40a:	51 09       	sbc	r21, r1
 40c:	61 09       	sbc	r22, r1
 40e:	71 09       	sbc	r23, r1
    UBRR0H = (baud_rate>>8);                            /* baud rate high byte */
 410:	bb 27       	eor	r27, r27
 412:	a7 2f       	mov	r26, r23
 414:	96 2f       	mov	r25, r22
 416:	85 2f       	mov	r24, r21
 418:	80 93 90 00 	sts	0x0090, r24
    UBRR0L = baud_rate;                                 /* baud rate  low byte */
 41c:	49 b9       	out	0x09, r20	; 9
    SET( UCSR0C, BM(UCSZ10) | BM(UCSZ00) );             /* define data bus size (8 bits) */
 41e:	e5 e9       	ldi	r30, 0x95	; 149
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	82 60       	ori	r24, 0x02	; 2
 426:	80 83       	st	Z, r24

    SET( UCSR0B, BM(TXEN0) | BM(RXEN0) );               /* enable transmitter and receiver */
 428:	8a b1       	in	r24, 0x0a	; 10
 42a:	88 61       	ori	r24, 0x18	; 24
 42c:	8a b9       	out	0x0a, r24	; 10
 42e:	08 95       	ret

00000430 <Uart0_CbRecv>:
}
void Uart0_CbRecv(void (*receive_cb)(u8 data) )
{
    _Uart0ReceiveCallback=receive_cb;            /* UART ISR function */
 430:	90 93 24 01 	sts	0x0124, r25
 434:	80 93 23 01 	sts	0x0123, r24
    if (receive_cb)
 438:	89 2b       	or	r24, r25
 43a:	19 f0       	breq	.+6      	; 0x442 <Uart0_CbRecv+0x12>
    {
        SET(UCSR0B,BM(RXCIE0));                     /* Enable the USART Receive Complete interrupt (USART_RXC) */
 43c:	57 9a       	sbi	0x0a, 7	; 10
        sei();                                      /* Enable the Global Interrupt Enable flag */
 43e:	78 94       	sei
 440:	08 95       	ret
    }
    else
    {
        CLR(UCSR0B,BM(RXCIE0));						/* Enable the USART Receive Complete interrupt (USART_RXC) */
 442:	57 98       	cbi	0x0a, 7	; 10
 444:	08 95       	ret

00000446 <Uart0_PutC>:
        Uart0_PutC(_data[byte++]);
    }
}
void Uart0_PutC(u8 data)
{
    while ( ALL_CLR( UCSR0A , BM(UDRE0) ) );	/* Blocks when a previous transmission is not finished */
 446:	5d 9b       	sbis	0x0b, 5	; 11
 448:	fe cf       	rjmp	.-4      	; 0x446 <Uart0_PutC>
    UDR0 = data;								/* Send through UART TX */
 44a:	8c b9       	out	0x0c, r24	; 12
 44c:	08 95       	ret

0000044e <__vector_16>:
void Timer0_SetDc(u8 duty_cycle)
{
    OCR0 = 2.55f * duty_cycle;
    if( TCNT0 > OCR0 )
    {
        TCNT0 = OCR0 - 1;
 44e:	1f 92       	push	r1
 450:	0f 92       	push	r0
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	0f 92       	push	r0
 456:	11 24       	eor	r1, r1
 458:	0b b6       	in	r0, 0x3b	; 59
 45a:	0f 92       	push	r0
 45c:	2f 93       	push	r18
 45e:	3f 93       	push	r19
 460:	4f 93       	push	r20
 462:	5f 93       	push	r21
 464:	6f 93       	push	r22
 466:	7f 93       	push	r23
 468:	8f 93       	push	r24
 46a:	9f 93       	push	r25
 46c:	af 93       	push	r26
 46e:	bf 93       	push	r27
 470:	ef 93       	push	r30
 472:	ff 93       	push	r31
 474:	e0 91 3e 01 	lds	r30, 0x013E
 478:	f0 91 3f 01 	lds	r31, 0x013F
 47c:	09 95       	icall
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	bf 91       	pop	r27
 484:	af 91       	pop	r26
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	7f 91       	pop	r23
 48c:	6f 91       	pop	r22
 48e:	5f 91       	pop	r21
 490:	4f 91       	pop	r20
 492:	3f 91       	pop	r19
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0b be       	out	0x3b, r0	; 59
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <__vector_15>:
 4a4:	1f 92       	push	r1
 4a6:	0f 92       	push	r0
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	0f 92       	push	r0
 4ac:	11 24       	eor	r1, r1
 4ae:	0b b6       	in	r0, 0x3b	; 59
 4b0:	0f 92       	push	r0
 4b2:	2f 93       	push	r18
 4b4:	3f 93       	push	r19
 4b6:	4f 93       	push	r20
 4b8:	5f 93       	push	r21
 4ba:	6f 93       	push	r22
 4bc:	7f 93       	push	r23
 4be:	8f 93       	push	r24
 4c0:	9f 93       	push	r25
 4c2:	af 93       	push	r26
 4c4:	bf 93       	push	r27
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
 4ca:	e0 91 40 01 	lds	r30, 0x0140
 4ce:	f0 91 41 01 	lds	r31, 0x0141
 4d2:	09 95       	icall
 4d4:	ff 91       	pop	r31
 4d6:	ef 91       	pop	r30
 4d8:	bf 91       	pop	r27
 4da:	af 91       	pop	r26
 4dc:	9f 91       	pop	r25
 4de:	8f 91       	pop	r24
 4e0:	7f 91       	pop	r23
 4e2:	6f 91       	pop	r22
 4e4:	5f 91       	pop	r21
 4e6:	4f 91       	pop	r20
 4e8:	3f 91       	pop	r19
 4ea:	2f 91       	pop	r18
 4ec:	0f 90       	pop	r0
 4ee:	0b be       	out	0x3b, r0	; 59
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <__vector_14>:
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	0b b6       	in	r0, 0x3b	; 59
 506:	0f 92       	push	r0
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
 520:	e0 91 3c 01 	lds	r30, 0x013C
 524:	f0 91 3d 01 	lds	r31, 0x013D
 528:	09 95       	icall
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	0f 90       	pop	r0
 544:	0b be       	out	0x3b, r0	; 59
 546:	0f 90       	pop	r0
 548:	0f be       	out	0x3f, r0	; 63
 54a:	0f 90       	pop	r0
 54c:	1f 90       	pop	r1
 54e:	18 95       	reti

00000550 <__vector_12>:
 550:	1f 92       	push	r1
 552:	0f 92       	push	r0
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	0f 92       	push	r0
 558:	11 24       	eor	r1, r1
 55a:	0b b6       	in	r0, 0x3b	; 59
 55c:	0f 92       	push	r0
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
 576:	e0 91 3a 01 	lds	r30, 0x013A
 57a:	f0 91 3b 01 	lds	r31, 0x013B
 57e:	09 95       	icall
 580:	ff 91       	pop	r31
 582:	ef 91       	pop	r30
 584:	bf 91       	pop	r27
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0b be       	out	0x3b, r0	; 59
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <__vector_13>:
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	0b b6       	in	r0, 0x3b	; 59
 5b2:	0f 92       	push	r0
 5b4:	2f 93       	push	r18
 5b6:	3f 93       	push	r19
 5b8:	4f 93       	push	r20
 5ba:	5f 93       	push	r21
 5bc:	6f 93       	push	r22
 5be:	7f 93       	push	r23
 5c0:	8f 93       	push	r24
 5c2:	9f 93       	push	r25
 5c4:	af 93       	push	r26
 5c6:	bf 93       	push	r27
 5c8:	ef 93       	push	r30
 5ca:	ff 93       	push	r31
 5cc:	e0 91 38 01 	lds	r30, 0x0138
 5d0:	f0 91 39 01 	lds	r31, 0x0139
 5d4:	09 95       	icall
 5d6:	ff 91       	pop	r31
 5d8:	ef 91       	pop	r30
 5da:	bf 91       	pop	r27
 5dc:	af 91       	pop	r26
 5de:	9f 91       	pop	r25
 5e0:	8f 91       	pop	r24
 5e2:	7f 91       	pop	r23
 5e4:	6f 91       	pop	r22
 5e6:	5f 91       	pop	r21
 5e8:	4f 91       	pop	r20
 5ea:	3f 91       	pop	r19
 5ec:	2f 91       	pop	r18
 5ee:	0f 90       	pop	r0
 5f0:	0b be       	out	0x3b, r0	; 59
 5f2:	0f 90       	pop	r0
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	0f 90       	pop	r0
 5f8:	1f 90       	pop	r1
 5fa:	18 95       	reti

000005fc <__vector_24>:
 5fc:	1f 92       	push	r1
 5fe:	0f 92       	push	r0
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	0f 92       	push	r0
 604:	11 24       	eor	r1, r1
 606:	0b b6       	in	r0, 0x3b	; 59
 608:	0f 92       	push	r0
 60a:	2f 93       	push	r18
 60c:	3f 93       	push	r19
 60e:	4f 93       	push	r20
 610:	5f 93       	push	r21
 612:	6f 93       	push	r22
 614:	7f 93       	push	r23
 616:	8f 93       	push	r24
 618:	9f 93       	push	r25
 61a:	af 93       	push	r26
 61c:	bf 93       	push	r27
 61e:	ef 93       	push	r30
 620:	ff 93       	push	r31
 622:	e0 91 36 01 	lds	r30, 0x0136
 626:	f0 91 37 01 	lds	r31, 0x0137
 62a:	09 95       	icall
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0b be       	out	0x3b, r0	; 59
 648:	0f 90       	pop	r0
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	0f 90       	pop	r0
 64e:	1f 90       	pop	r1
 650:	18 95       	reti

00000652 <__vector_11>:
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	0b b6       	in	r0, 0x3b	; 59
 65e:	0f 92       	push	r0
 660:	2f 93       	push	r18
 662:	3f 93       	push	r19
 664:	4f 93       	push	r20
 666:	5f 93       	push	r21
 668:	6f 93       	push	r22
 66a:	7f 93       	push	r23
 66c:	8f 93       	push	r24
 66e:	9f 93       	push	r25
 670:	af 93       	push	r26
 672:	bf 93       	push	r27
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
 678:	e0 91 34 01 	lds	r30, 0x0134
 67c:	f0 91 35 01 	lds	r31, 0x0135
 680:	09 95       	icall
 682:	ff 91       	pop	r31
 684:	ef 91       	pop	r30
 686:	bf 91       	pop	r27
 688:	af 91       	pop	r26
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	7f 91       	pop	r23
 690:	6f 91       	pop	r22
 692:	5f 91       	pop	r21
 694:	4f 91       	pop	r20
 696:	3f 91       	pop	r19
 698:	2f 91       	pop	r18
 69a:	0f 90       	pop	r0
 69c:	0b be       	out	0x3b, r0	; 59
 69e:	0f 90       	pop	r0
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	0f 90       	pop	r0
 6a4:	1f 90       	pop	r1
 6a6:	18 95       	reti

000006a8 <__vector_10>:
 6a8:	1f 92       	push	r1
 6aa:	0f 92       	push	r0
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	0f 92       	push	r0
 6b0:	11 24       	eor	r1, r1
 6b2:	0b b6       	in	r0, 0x3b	; 59
 6b4:	0f 92       	push	r0
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	4f 93       	push	r20
 6bc:	5f 93       	push	r21
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
 6ce:	e0 91 30 01 	lds	r30, 0x0130
 6d2:	f0 91 31 01 	lds	r31, 0x0131
 6d6:	09 95       	icall
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	bf 91       	pop	r27
 6de:	af 91       	pop	r26
 6e0:	9f 91       	pop	r25
 6e2:	8f 91       	pop	r24
 6e4:	7f 91       	pop	r23
 6e6:	6f 91       	pop	r22
 6e8:	5f 91       	pop	r21
 6ea:	4f 91       	pop	r20
 6ec:	3f 91       	pop	r19
 6ee:	2f 91       	pop	r18
 6f0:	0f 90       	pop	r0
 6f2:	0b be       	out	0x3b, r0	; 59
 6f4:	0f 90       	pop	r0
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	0f 90       	pop	r0
 6fa:	1f 90       	pop	r1
 6fc:	18 95       	reti

000006fe <__vector_9>:
 6fe:	1f 92       	push	r1
 700:	0f 92       	push	r0
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	0f 92       	push	r0
 706:	11 24       	eor	r1, r1
 708:	0b b6       	in	r0, 0x3b	; 59
 70a:	0f 92       	push	r0
 70c:	2f 93       	push	r18
 70e:	3f 93       	push	r19
 710:	4f 93       	push	r20
 712:	5f 93       	push	r21
 714:	6f 93       	push	r22
 716:	7f 93       	push	r23
 718:	8f 93       	push	r24
 71a:	9f 93       	push	r25
 71c:	af 93       	push	r26
 71e:	bf 93       	push	r27
 720:	ef 93       	push	r30
 722:	ff 93       	push	r31
 724:	e0 91 32 01 	lds	r30, 0x0132
 728:	f0 91 33 01 	lds	r31, 0x0133
 72c:	09 95       	icall
 72e:	ff 91       	pop	r31
 730:	ef 91       	pop	r30
 732:	bf 91       	pop	r27
 734:	af 91       	pop	r26
 736:	9f 91       	pop	r25
 738:	8f 91       	pop	r24
 73a:	7f 91       	pop	r23
 73c:	6f 91       	pop	r22
 73e:	5f 91       	pop	r21
 740:	4f 91       	pop	r20
 742:	3f 91       	pop	r19
 744:	2f 91       	pop	r18
 746:	0f 90       	pop	r0
 748:	0b be       	out	0x3b, r0	; 59
 74a:	0f 90       	pop	r0
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	0f 90       	pop	r0
 750:	1f 90       	pop	r1
 752:	18 95       	reti

00000754 <__vector_29>:
 754:	1f 92       	push	r1
 756:	0f 92       	push	r0
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	0f 92       	push	r0
 75c:	11 24       	eor	r1, r1
 75e:	0b b6       	in	r0, 0x3b	; 59
 760:	0f 92       	push	r0
 762:	2f 93       	push	r18
 764:	3f 93       	push	r19
 766:	4f 93       	push	r20
 768:	5f 93       	push	r21
 76a:	6f 93       	push	r22
 76c:	7f 93       	push	r23
 76e:	8f 93       	push	r24
 770:	9f 93       	push	r25
 772:	af 93       	push	r26
 774:	bf 93       	push	r27
 776:	ef 93       	push	r30
 778:	ff 93       	push	r31
 77a:	e0 91 2e 01 	lds	r30, 0x012E
 77e:	f0 91 2f 01 	lds	r31, 0x012F
 782:	09 95       	icall
 784:	ff 91       	pop	r31
 786:	ef 91       	pop	r30
 788:	bf 91       	pop	r27
 78a:	af 91       	pop	r26
 78c:	9f 91       	pop	r25
 78e:	8f 91       	pop	r24
 790:	7f 91       	pop	r23
 792:	6f 91       	pop	r22
 794:	5f 91       	pop	r21
 796:	4f 91       	pop	r20
 798:	3f 91       	pop	r19
 79a:	2f 91       	pop	r18
 79c:	0f 90       	pop	r0
 79e:	0b be       	out	0x3b, r0	; 59
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	18 95       	reti

000007aa <__vector_26>:
 7aa:	1f 92       	push	r1
 7ac:	0f 92       	push	r0
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	0f 92       	push	r0
 7b2:	11 24       	eor	r1, r1
 7b4:	0b b6       	in	r0, 0x3b	; 59
 7b6:	0f 92       	push	r0
 7b8:	2f 93       	push	r18
 7ba:	3f 93       	push	r19
 7bc:	4f 93       	push	r20
 7be:	5f 93       	push	r21
 7c0:	6f 93       	push	r22
 7c2:	7f 93       	push	r23
 7c4:	8f 93       	push	r24
 7c6:	9f 93       	push	r25
 7c8:	af 93       	push	r26
 7ca:	bf 93       	push	r27
 7cc:	ef 93       	push	r30
 7ce:	ff 93       	push	r31
 7d0:	e0 91 2c 01 	lds	r30, 0x012C
 7d4:	f0 91 2d 01 	lds	r31, 0x012D
 7d8:	09 95       	icall
 7da:	ff 91       	pop	r31
 7dc:	ef 91       	pop	r30
 7de:	bf 91       	pop	r27
 7e0:	af 91       	pop	r26
 7e2:	9f 91       	pop	r25
 7e4:	8f 91       	pop	r24
 7e6:	7f 91       	pop	r23
 7e8:	6f 91       	pop	r22
 7ea:	5f 91       	pop	r21
 7ec:	4f 91       	pop	r20
 7ee:	3f 91       	pop	r19
 7f0:	2f 91       	pop	r18
 7f2:	0f 90       	pop	r0
 7f4:	0b be       	out	0x3b, r0	; 59
 7f6:	0f 90       	pop	r0
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	0f 90       	pop	r0
 7fc:	1f 90       	pop	r1
 7fe:	18 95       	reti

00000800 <__vector_27>:
 800:	1f 92       	push	r1
 802:	0f 92       	push	r0
 804:	0f b6       	in	r0, 0x3f	; 63
 806:	0f 92       	push	r0
 808:	11 24       	eor	r1, r1
 80a:	0b b6       	in	r0, 0x3b	; 59
 80c:	0f 92       	push	r0
 80e:	2f 93       	push	r18
 810:	3f 93       	push	r19
 812:	4f 93       	push	r20
 814:	5f 93       	push	r21
 816:	6f 93       	push	r22
 818:	7f 93       	push	r23
 81a:	8f 93       	push	r24
 81c:	9f 93       	push	r25
 81e:	af 93       	push	r26
 820:	bf 93       	push	r27
 822:	ef 93       	push	r30
 824:	ff 93       	push	r31
 826:	e0 91 2a 01 	lds	r30, 0x012A
 82a:	f0 91 2b 01 	lds	r31, 0x012B
 82e:	09 95       	icall
 830:	ff 91       	pop	r31
 832:	ef 91       	pop	r30
 834:	bf 91       	pop	r27
 836:	af 91       	pop	r26
 838:	9f 91       	pop	r25
 83a:	8f 91       	pop	r24
 83c:	7f 91       	pop	r23
 83e:	6f 91       	pop	r22
 840:	5f 91       	pop	r21
 842:	4f 91       	pop	r20
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	0f 90       	pop	r0
 84a:	0b be       	out	0x3b, r0	; 59
 84c:	0f 90       	pop	r0
 84e:	0f be       	out	0x3f, r0	; 63
 850:	0f 90       	pop	r0
 852:	1f 90       	pop	r1
 854:	18 95       	reti

00000856 <__vector_28>:
 856:	1f 92       	push	r1
 858:	0f 92       	push	r0
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	0f 92       	push	r0
 85e:	11 24       	eor	r1, r1
 860:	0b b6       	in	r0, 0x3b	; 59
 862:	0f 92       	push	r0
 864:	2f 93       	push	r18
 866:	3f 93       	push	r19
 868:	4f 93       	push	r20
 86a:	5f 93       	push	r21
 86c:	6f 93       	push	r22
 86e:	7f 93       	push	r23
 870:	8f 93       	push	r24
 872:	9f 93       	push	r25
 874:	af 93       	push	r26
 876:	bf 93       	push	r27
 878:	ef 93       	push	r30
 87a:	ff 93       	push	r31
 87c:	e0 91 28 01 	lds	r30, 0x0128
 880:	f0 91 29 01 	lds	r31, 0x0129
 884:	09 95       	icall
 886:	ff 91       	pop	r31
 888:	ef 91       	pop	r30
 88a:	bf 91       	pop	r27
 88c:	af 91       	pop	r26
 88e:	9f 91       	pop	r25
 890:	8f 91       	pop	r24
 892:	7f 91       	pop	r23
 894:	6f 91       	pop	r22
 896:	5f 91       	pop	r21
 898:	4f 91       	pop	r20
 89a:	3f 91       	pop	r19
 89c:	2f 91       	pop	r18
 89e:	0f 90       	pop	r0
 8a0:	0b be       	out	0x3b, r0	; 59
 8a2:	0f 90       	pop	r0
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	0f 90       	pop	r0
 8a8:	1f 90       	pop	r1
 8aa:	18 95       	reti

000008ac <__vector_25>:
 8ac:	1f 92       	push	r1
 8ae:	0f 92       	push	r0
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	0f 92       	push	r0
 8b4:	11 24       	eor	r1, r1
 8b6:	0b b6       	in	r0, 0x3b	; 59
 8b8:	0f 92       	push	r0
 8ba:	2f 93       	push	r18
 8bc:	3f 93       	push	r19
 8be:	4f 93       	push	r20
 8c0:	5f 93       	push	r21
 8c2:	6f 93       	push	r22
 8c4:	7f 93       	push	r23
 8c6:	8f 93       	push	r24
 8c8:	9f 93       	push	r25
 8ca:	af 93       	push	r26
 8cc:	bf 93       	push	r27
 8ce:	ef 93       	push	r30
 8d0:	ff 93       	push	r31
 8d2:	e0 91 26 01 	lds	r30, 0x0126
 8d6:	f0 91 27 01 	lds	r31, 0x0127
 8da:	09 95       	icall
 8dc:	ff 91       	pop	r31
 8de:	ef 91       	pop	r30
 8e0:	bf 91       	pop	r27
 8e2:	af 91       	pop	r26
 8e4:	9f 91       	pop	r25
 8e6:	8f 91       	pop	r24
 8e8:	7f 91       	pop	r23
 8ea:	6f 91       	pop	r22
 8ec:	5f 91       	pop	r21
 8ee:	4f 91       	pop	r20
 8f0:	3f 91       	pop	r19
 8f2:	2f 91       	pop	r18
 8f4:	0f 90       	pop	r0
 8f6:	0b be       	out	0x3b, r0	; 59
 8f8:	0f 90       	pop	r0
 8fa:	0f be       	out	0x3f, r0	; 63
 8fc:	0f 90       	pop	r0
 8fe:	1f 90       	pop	r1
 900:	18 95       	reti

00000902 <Timer0_Reset>:
 902:	12 be       	out	0x32, r1	; 50
 904:	08 95       	ret

00000906 <Timer0_Stop>:
 906:	83 b7       	in	r24, 0x33	; 51
 908:	88 7f       	andi	r24, 0xF8	; 248
 90a:	83 bf       	out	0x33, r24	; 51
 90c:	08 95       	ret

0000090e <Timer0_SetTime>:
    }
}
void Timer0_SetTime(u32 ticks)
{
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	00 d0       	rcall	.+0      	; 0x914 <Timer0_SetTime+0x6>
 914:	00 d0       	rcall	.+0      	; 0x916 <Timer0_SetTime+0x8>
 916:	cd b7       	in	r28, 0x3d	; 61
 918:	de b7       	in	r29, 0x3e	; 62
    /* pre-scaling */
    if      (ticks<=0xFF*   1UL)    {                                   _Timer0_prsc =                   BM(CS00); }
 91a:	6f 3f       	cpi	r22, 0xFF	; 255
 91c:	71 05       	cpc	r23, r1
 91e:	81 05       	cpc	r24, r1
 920:	91 05       	cpc	r25, r1
 922:	09 f0       	breq	.+2      	; 0x926 <Timer0_SetTime+0x18>
 924:	10 f4       	brcc	.+4      	; 0x92a <Timer0_SetTime+0x1c>
 926:	21 e0       	ldi	r18, 0x01	; 1
 928:	50 c0       	rjmp	.+160    	; 0x9ca <Timer0_SetTime+0xbc>
    else if (ticks<=0xFF*   8UL)    { ticks>>= 3; /* divide by    8*/   _Timer0_prsc =          BM(CS01)         ; }
 92a:	69 3f       	cpi	r22, 0xF9	; 249
 92c:	27 e0       	ldi	r18, 0x07	; 7
 92e:	72 07       	cpc	r23, r18
 930:	81 05       	cpc	r24, r1
 932:	91 05       	cpc	r25, r1
 934:	48 f4       	brcc	.+18     	; 0x948 <Timer0_SetTime+0x3a>
 936:	f3 e0       	ldi	r31, 0x03	; 3
 938:	96 95       	lsr	r25
 93a:	87 95       	ror	r24
 93c:	77 95       	ror	r23
 93e:	67 95       	ror	r22
 940:	fa 95       	dec	r31
 942:	d1 f7       	brne	.-12     	; 0x938 <Timer0_SetTime+0x2a>
 944:	22 e0       	ldi	r18, 0x02	; 2
 946:	41 c0       	rjmp	.+130    	; 0x9ca <Timer0_SetTime+0xbc>
    else if (ticks<=0xFF*  32UL)    { ticks>>= 5; /* divide by   32*/   _Timer0_prsc =          BM(CS01)|BM(CS00); }
 948:	61 3e       	cpi	r22, 0xE1	; 225
 94a:	2f e1       	ldi	r18, 0x1F	; 31
 94c:	72 07       	cpc	r23, r18
 94e:	81 05       	cpc	r24, r1
 950:	91 05       	cpc	r25, r1
 952:	48 f4       	brcc	.+18     	; 0x966 <Timer0_SetTime+0x58>
 954:	e5 e0       	ldi	r30, 0x05	; 5
 956:	96 95       	lsr	r25
 958:	87 95       	ror	r24
 95a:	77 95       	ror	r23
 95c:	67 95       	ror	r22
 95e:	ea 95       	dec	r30
 960:	d1 f7       	brne	.-12     	; 0x956 <Timer0_SetTime+0x48>
 962:	23 e0       	ldi	r18, 0x03	; 3
 964:	32 c0       	rjmp	.+100    	; 0x9ca <Timer0_SetTime+0xbc>
    else if (ticks<=0xFF*  64UL)    { ticks>>= 6; /* divide by   64*/   _Timer0_prsc = BM(CS02)                  ; }
 966:	61 3c       	cpi	r22, 0xC1	; 193
 968:	2f e3       	ldi	r18, 0x3F	; 63
 96a:	72 07       	cpc	r23, r18
 96c:	81 05       	cpc	r24, r1
 96e:	91 05       	cpc	r25, r1
 970:	48 f4       	brcc	.+18     	; 0x984 <Timer0_SetTime+0x76>
 972:	56 e0       	ldi	r21, 0x06	; 6
 974:	96 95       	lsr	r25
 976:	87 95       	ror	r24
 978:	77 95       	ror	r23
 97a:	67 95       	ror	r22
 97c:	5a 95       	dec	r21
 97e:	d1 f7       	brne	.-12     	; 0x974 <Timer0_SetTime+0x66>
 980:	24 e0       	ldi	r18, 0x04	; 4
 982:	23 c0       	rjmp	.+70     	; 0x9ca <Timer0_SetTime+0xbc>
    else if (ticks<=0xFF* 128UL)    { ticks>>= 7; /* divide by  128*/   _Timer0_prsc = BM(CS02)         |BM(CS00); }
 984:	61 38       	cpi	r22, 0x81	; 129
 986:	2f e7       	ldi	r18, 0x7F	; 127
 988:	72 07       	cpc	r23, r18
 98a:	81 05       	cpc	r24, r1
 98c:	91 05       	cpc	r25, r1
 98e:	48 f4       	brcc	.+18     	; 0x9a2 <Timer0_SetTime+0x94>
 990:	47 e0       	ldi	r20, 0x07	; 7
 992:	96 95       	lsr	r25
 994:	87 95       	ror	r24
 996:	77 95       	ror	r23
 998:	67 95       	ror	r22
 99a:	4a 95       	dec	r20
 99c:	d1 f7       	brne	.-12     	; 0x992 <Timer0_SetTime+0x84>
 99e:	25 e0       	ldi	r18, 0x05	; 5
 9a0:	14 c0       	rjmp	.+40     	; 0x9ca <Timer0_SetTime+0xbc>
    else if (ticks<=0xFF* 256UL)    { ticks>>= 8; /* divide by  256*/   _Timer0_prsc = BM(CS02)|BM(CS01)         ; }
 9a2:	61 30       	cpi	r22, 0x01	; 1
 9a4:	2f ef       	ldi	r18, 0xFF	; 255
 9a6:	72 07       	cpc	r23, r18
 9a8:	81 05       	cpc	r24, r1
 9aa:	91 05       	cpc	r25, r1
 9ac:	30 f4       	brcc	.+12     	; 0x9ba <Timer0_SetTime+0xac>
 9ae:	67 2f       	mov	r22, r23
 9b0:	78 2f       	mov	r23, r24
 9b2:	89 2f       	mov	r24, r25
 9b4:	99 27       	eor	r25, r25
 9b6:	26 e0       	ldi	r18, 0x06	; 6
 9b8:	08 c0       	rjmp	.+16     	; 0x9ca <Timer0_SetTime+0xbc>
    else  /*(ticks<=0xFF*1024UL)*/  { ticks>>=10; /* divide by 1024*/   _Timer0_prsc = BM(CS02)|BM(CS01)|BM(CS00); }
 9ba:	2a e0       	ldi	r18, 0x0A	; 10
 9bc:	96 95       	lsr	r25
 9be:	87 95       	ror	r24
 9c0:	77 95       	ror	r23
 9c2:	67 95       	ror	r22
 9c4:	2a 95       	dec	r18
 9c6:	d1 f7       	brne	.-12     	; 0x9bc <Timer0_SetTime+0xae>
 9c8:	27 e0       	ldi	r18, 0x07	; 7
 9ca:	20 93 25 01 	sts	0x0125, r18

    Timer0_Stop();
 9ce:	69 83       	std	Y+1, r22	; 0x01
 9d0:	7a 83       	std	Y+2, r23	; 0x02
 9d2:	8b 83       	std	Y+3, r24	; 0x03
 9d4:	9c 83       	std	Y+4, r25	; 0x04
 9d6:	97 df       	rcall	.-210    	; 0x906 <Timer0_Stop>
    OCR0=ticks;
 9d8:	69 81       	ldd	r22, Y+1	; 0x01
 9da:	61 bf       	out	0x31, r22	; 49
    SET(TCCR0, _Timer0_prsc);
 9dc:	93 b7       	in	r25, 0x33	; 51
 9de:	80 91 25 01 	lds	r24, 0x0125
 9e2:	89 2b       	or	r24, r25
 9e4:	83 bf       	out	0x33, r24	; 51
}
 9e6:	0f 90       	pop	r0
 9e8:	0f 90       	pop	r0
 9ea:	0f 90       	pop	r0
 9ec:	0f 90       	pop	r0
 9ee:	df 91       	pop	r29
 9f0:	cf 91       	pop	r28
 9f2:	08 95       	ret

000009f4 <Timer0_Init>:
{
	_Timer3_CPT_ISR();
}

void Timer0_Init(u8 mode, u32 ticks)
{
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
 9f8:	00 d0       	rcall	.+0      	; 0x9fa <Timer0_Init+0x6>
 9fa:	00 d0       	rcall	.+0      	; 0x9fc <Timer0_Init+0x8>
 9fc:	1f 92       	push	r1
 9fe:	cd b7       	in	r28, 0x3d	; 61
 a00:	de b7       	in	r29, 0x3e	; 62
    Timer0_Stop();
 a02:	4a 83       	std	Y+2, r20	; 0x02
 a04:	5b 83       	std	Y+3, r21	; 0x03
 a06:	6c 83       	std	Y+4, r22	; 0x04
 a08:	7d 83       	std	Y+5, r23	; 0x05
 a0a:	89 83       	std	Y+1, r24	; 0x01
 a0c:	7c df       	rcall	.-264    	; 0x906 <Timer0_Stop>
    SET(TIFR, BM(OCF0) | BM(TOV0) ); /* clear flags */
 a0e:	96 b7       	in	r25, 0x36	; 54
 a10:	93 60       	ori	r25, 0x03	; 3
 a12:	96 bf       	out	0x36, r25	; 54

    switch(mode&TIMER_MODE_MASK) /* TIMER_MODE */
 a14:	89 81       	ldd	r24, Y+1	; 0x01
 a16:	98 2f       	mov	r25, r24
 a18:	93 70       	andi	r25, 0x03	; 3
 a1a:	4a 81       	ldd	r20, Y+2	; 0x02
 a1c:	5b 81       	ldd	r21, Y+3	; 0x03
 a1e:	6c 81       	ldd	r22, Y+4	; 0x04
 a20:	7d 81       	ldd	r23, Y+5	; 0x05
 a22:	92 30       	cpi	r25, 0x02	; 2
 a24:	41 f0       	breq	.+16     	; 0xa36 <Timer0_Init+0x42>
 a26:	93 30       	cpi	r25, 0x03	; 3
 a28:	41 f0       	breq	.+16     	; 0xa3a <Timer0_Init+0x46>
 a2a:	91 30       	cpi	r25, 0x01	; 1
 a2c:	11 f0       	breq	.+4      	; 0xa32 <Timer0_Init+0x3e>
    {
        case TIMER_MODE_NORMAL  : {TCCR0 = BM(FOC0)                        ;break;}
 a2e:	90 e8       	ldi	r25, 0x80	; 128
 a30:	05 c0       	rjmp	.+10     	; 0xa3c <Timer0_Init+0x48>
        case TIMER_MODE_PWM     : {TCCR0 = BM(FOC0)             | BM(WGM00);break;}
 a32:	90 ec       	ldi	r25, 0xC0	; 192
 a34:	03 c0       	rjmp	.+6      	; 0xa3c <Timer0_Init+0x48>
        case TIMER_MODE_CTC     : {TCCR0 = BM(FOC0) | BM(WGM01)            ;break;}
 a36:	98 e8       	ldi	r25, 0x88	; 136
 a38:	01 c0       	rjmp	.+2      	; 0xa3c <Timer0_Init+0x48>
        case TIMER_MODE_FAST_PWM: {TCCR0 = BM(FOC0) | BM(WGM01) | BM(WGM00);break;}
 a3a:	98 ec       	ldi	r25, 0xC8	; 200
 a3c:	93 bf       	out	0x33, r25	; 51
        default /*Mode Normal*/ : {TCCR0 = BM(FOC0)                        ;break;}
    }

    CLR(TCCR0, BM(COM01) | BM(COM00) );
 a3e:	93 b7       	in	r25, 0x33	; 51
 a40:	9f 7c       	andi	r25, 0xCF	; 207
 a42:	93 bf       	out	0x33, r25	; 51
    switch(mode&TIMER_COM_MASK) /* TIMER_COMPARE_OUTPUT_MODE */
 a44:	80 7e       	andi	r24, 0xE0	; 224
 a46:	80 34       	cpi	r24, 0x40	; 64
 a48:	39 f0       	breq	.+14     	; 0xa58 <Timer0_Init+0x64>
 a4a:	80 38       	cpi	r24, 0x80	; 128
 a4c:	41 f0       	breq	.+16     	; 0xa5e <Timer0_Init+0x6a>
 a4e:	80 32       	cpi	r24, 0x20	; 32
 a50:	51 f4       	brne	.+20     	; 0xa66 <Timer0_Init+0x72>
    {
        case TIMER_COM_OFF: {                                                             break;}
        case TIMER_COM_TGL: {SET(TCCR0,             BM(COM00) ); SET(OC0_DIR_R, BM(OC0)); break;}
 a52:	83 b7       	in	r24, 0x33	; 51
 a54:	80 61       	ori	r24, 0x10	; 16
 a56:	05 c0       	rjmp	.+10     	; 0xa62 <Timer0_Init+0x6e>
        case TIMER_COM_CLR: {SET(TCCR0, BM(COM01)             ); SET(OC0_DIR_R, BM(OC0)); break;}
 a58:	83 b7       	in	r24, 0x33	; 51
 a5a:	80 62       	ori	r24, 0x20	; 32
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <Timer0_Init+0x6e>
        case TIMER_COM_SET: {SET(TCCR0, BM(COM01) | BM(COM00) ); SET(OC0_DIR_R, BM(OC0)); break;}
 a5e:	83 b7       	in	r24, 0x33	; 51
 a60:	80 63       	ori	r24, 0x30	; 48
 a62:	83 bf       	out	0x33, r24	; 51
 a64:	bc 9a       	sbi	0x17, 4	; 23
        default  /*OFF*/  : {                                                             break;}
    }

    Timer0_SetTime(ticks);
 a66:	cb 01       	movw	r24, r22
 a68:	ba 01       	movw	r22, r20
}
 a6a:	0f 90       	pop	r0
 a6c:	0f 90       	pop	r0
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	0f 90       	pop	r0
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
        case TIMER_COM_CLR: {SET(TCCR0, BM(COM01)             ); SET(OC0_DIR_R, BM(OC0)); break;}
        case TIMER_COM_SET: {SET(TCCR0, BM(COM01) | BM(COM00) ); SET(OC0_DIR_R, BM(OC0)); break;}
        default  /*OFF*/  : {                                                             break;}
    }

    Timer0_SetTime(ticks);
 a78:	4a cf       	rjmp	.-364    	; 0x90e <Timer0_SetTime>

00000a7a <Timer0_SetCmpMatch>:
    OCR0=ticks;
    SET(TCCR0, _Timer0_prsc);
}
void Timer0_SetCmpMatch(u32 ticks)
{
    Timer0_SetTime(ticks);
 a7a:	49 cf       	rjmp	.-366    	; 0x90e <Timer0_SetTime>

00000a7c <__udivmodsi4>:
 a7c:	a1 e2       	ldi	r26, 0x21	; 33
 a7e:	1a 2e       	mov	r1, r26
 a80:	aa 1b       	sub	r26, r26
 a82:	bb 1b       	sub	r27, r27
 a84:	fd 01       	movw	r30, r26
 a86:	0d c0       	rjmp	.+26     	; 0xaa2 <__udivmodsi4_ep>

00000a88 <__udivmodsi4_loop>:
 a88:	aa 1f       	adc	r26, r26
 a8a:	bb 1f       	adc	r27, r27
 a8c:	ee 1f       	adc	r30, r30
 a8e:	ff 1f       	adc	r31, r31
 a90:	a2 17       	cp	r26, r18
 a92:	b3 07       	cpc	r27, r19
 a94:	e4 07       	cpc	r30, r20
 a96:	f5 07       	cpc	r31, r21
 a98:	20 f0       	brcs	.+8      	; 0xaa2 <__udivmodsi4_ep>
 a9a:	a2 1b       	sub	r26, r18
 a9c:	b3 0b       	sbc	r27, r19
 a9e:	e4 0b       	sbc	r30, r20
 aa0:	f5 0b       	sbc	r31, r21

00000aa2 <__udivmodsi4_ep>:
 aa2:	66 1f       	adc	r22, r22
 aa4:	77 1f       	adc	r23, r23
 aa6:	88 1f       	adc	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	1a 94       	dec	r1
 aac:	69 f7       	brne	.-38     	; 0xa88 <__udivmodsi4_loop>
 aae:	60 95       	com	r22
 ab0:	70 95       	com	r23
 ab2:	80 95       	com	r24
 ab4:	90 95       	com	r25
 ab6:	9b 01       	movw	r18, r22
 ab8:	ac 01       	movw	r20, r24
 aba:	bd 01       	movw	r22, r26
 abc:	cf 01       	movw	r24, r30
 abe:	08 95       	ret

00000ac0 <_exit>:
 ac0:	f8 94       	cli

00000ac2 <__stop_program>:
 ac2:	ff cf       	rjmp	.-2      	; 0xac2 <__stop_program>
